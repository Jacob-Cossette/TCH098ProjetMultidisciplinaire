
Projet_Multi_4X4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001f04  00001f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000175  00800140  00800140  00001fd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002034  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000360  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000032f0  00000000  00000000  000023d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011c3  00000000  00000000  000056c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6b  00000000  00000000  00006887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a84  00000000  00000000  000083f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4b  00000000  00000000  00008e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d82  00000000  00000000  00009cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000308  00000000  00000000  0000ca45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 00 	jmp	0x112	; 0x112 <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_20>
      54:	0c 94 4b 04 	jmp	0x896	; 0x896 <__vector_21>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_28>
      74:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_29>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	4c 02       	muls	r20, r28
      7e:	4c 02       	muls	r20, r28
      80:	4c 02       	muls	r20, r28
      82:	4c 02       	muls	r20, r28
      84:	4c 02       	muls	r20, r28
      86:	62 02       	muls	r22, r18
      88:	62 02       	muls	r22, r18
      8a:	64 02       	muls	r22, r20
      8c:	4e 02       	muls	r20, r30
      8e:	4e 02       	muls	r20, r30
      90:	4e 02       	muls	r20, r30
      92:	4e 02       	muls	r20, r30
      94:	50 02       	muls	r21, r16
      96:	50 02       	muls	r21, r16
      98:	50 02       	muls	r21, r16
      9a:	50 02       	muls	r21, r16
      9c:	62 02       	muls	r22, r18
      9e:	62 02       	muls	r22, r18
      a0:	52 02       	muls	r21, r18
      a2:	52 02       	muls	r21, r18
      a4:	52 02       	muls	r21, r18
      a6:	52 02       	muls	r21, r18
      a8:	52 02       	muls	r21, r18
      aa:	62 02       	muls	r22, r18
      ac:	62 02       	muls	r22, r18
      ae:	54 02       	muls	r21, r20
      b0:	54 02       	muls	r21, r20
      b2:	54 02       	muls	r21, r20
      b4:	54 02       	muls	r21, r20
      b6:	62 02       	muls	r22, r18
      b8:	62 02       	muls	r22, r18
      ba:	62 02       	muls	r22, r18
      bc:	56 02       	muls	r21, r22
      be:	56 02       	muls	r21, r22
      c0:	56 02       	muls	r21, r22
      c2:	56 02       	muls	r21, r22
      c4:	56 02       	muls	r21, r22
      c6:	62 02       	muls	r22, r18
      c8:	62 02       	muls	r22, r18
      ca:	58 02       	muls	r21, r24
      cc:	5a 02       	muls	r21, r26
      ce:	5a 02       	muls	r21, r26
      d0:	5a 02       	muls	r21, r26
      d2:	5a 02       	muls	r21, r26
      d4:	5c 02       	muls	r21, r28
      d6:	5c 02       	muls	r21, r28
      d8:	5c 02       	muls	r21, r28
      da:	5c 02       	muls	r21, r28
      dc:	62 02       	muls	r22, r18
      de:	62 02       	muls	r22, r18
      e0:	5e 02       	muls	r21, r30
      e2:	5e 02       	muls	r21, r30
      e4:	5e 02       	muls	r21, r30
      e6:	5e 02       	muls	r21, r30
      e8:	5e 02       	muls	r21, r30
      ea:	62 02       	muls	r22, r18
      ec:	62 02       	muls	r22, r18
      ee:	60 02       	muls	r22, r16
      f0:	60 02       	muls	r22, r16
      f2:	60 02       	muls	r22, r16
      f4:	60 02       	muls	r22, r16
      f6:	c7 02       	muls	r28, r23
      f8:	cb 02       	muls	r28, r27
      fa:	cf 02       	muls	r28, r31
      fc:	e1 02       	muls	r30, r17
      fe:	f3 02       	muls	r31, r19
     100:	ff 02       	muls	r31, r31
     102:	08 03       	fmul	r16, r16
     104:	0e 03       	fmul	r16, r22

00000106 <__trampolines_end>:
     106:	63 64       	ori	r22, 0x43	; 67
     108:	69 6e       	ori	r22, 0xE9	; 233
     10a:	6f 70       	andi	r22, 0x0F	; 15
     10c:	73 75       	andi	r23, 0x53	; 83
     10e:	78 58       	subi	r23, 0x88	; 136
     110:	5b 00       	.word	0x005b	; ????

00000112 <__ctors_end>:
     112:	11 24       	eor	r1, r1
     114:	1f be       	out	0x3f, r1	; 63
     116:	cf ef       	ldi	r28, 0xFF	; 255
     118:	d8 e0       	ldi	r29, 0x08	; 8
     11a:	de bf       	out	0x3e, r29	; 62
     11c:	cd bf       	out	0x3d, r28	; 61

0000011e <__do_copy_data>:
     11e:	11 e0       	ldi	r17, 0x01	; 1
     120:	a0 e0       	ldi	r26, 0x00	; 0
     122:	b1 e0       	ldi	r27, 0x01	; 1
     124:	e4 e0       	ldi	r30, 0x04	; 4
     126:	ff e1       	ldi	r31, 0x1F	; 31
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x10>
     12a:	05 90       	lpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a0 34       	cpi	r26, 0x40	; 64
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0xc>

00000134 <__do_clear_bss>:
     134:	22 e0       	ldi	r18, 0x02	; 2
     136:	a0 e4       	ldi	r26, 0x40	; 64
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a5 3b       	cpi	r26, 0xB5	; 181
     140:	b2 07       	cpc	r27, r18
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 66 03 	call	0x6cc	; 0x6cc <main>
     148:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <pwm0_init>:

void pwm1_set_PD5(uint16_t limit){ 
	OCR1A = limit;
}
void pwm1_set_PD4(uint16_t limit){
	OCR1B = limit;
     150:	84 b1       	in	r24, 0x04	; 4
     152:	80 61       	ori	r24, 0x10	; 16
     154:	84 b9       	out	0x04, r24	; 4
     156:	84 b1       	in	r24, 0x04	; 4
     158:	88 60       	ori	r24, 0x08	; 8
     15a:	84 b9       	out	0x04, r24	; 4
     15c:	84 b5       	in	r24, 0x24	; 36
     15e:	80 68       	ori	r24, 0x80	; 128
     160:	84 bd       	out	0x24, r24	; 36
     162:	84 b5       	in	r24, 0x24	; 36
     164:	80 62       	ori	r24, 0x20	; 32
     166:	84 bd       	out	0x24, r24	; 36
     168:	84 b5       	in	r24, 0x24	; 36
     16a:	8f 7b       	andi	r24, 0xBF	; 191
     16c:	84 bd       	out	0x24, r24	; 36
     16e:	84 b5       	in	r24, 0x24	; 36
     170:	8f 7e       	andi	r24, 0xEF	; 239
     172:	84 bd       	out	0x24, r24	; 36
     174:	84 b5       	in	r24, 0x24	; 36
     176:	81 60       	ori	r24, 0x01	; 1
     178:	84 bd       	out	0x24, r24	; 36
     17a:	84 b5       	in	r24, 0x24	; 36
     17c:	8d 7f       	andi	r24, 0xFD	; 253
     17e:	84 bd       	out	0x24, r24	; 36
     180:	16 bc       	out	0x26, r1	; 38
     182:	85 b5       	in	r24, 0x25	; 37
     184:	81 60       	ori	r24, 0x01	; 1
     186:	85 bd       	out	0x25, r24	; 37
     188:	85 b5       	in	r24, 0x25	; 37
     18a:	8d 7f       	andi	r24, 0xFD	; 253
     18c:	85 bd       	out	0x25, r24	; 37
     18e:	85 b5       	in	r24, 0x25	; 37
     190:	8b 7f       	andi	r24, 0xFB	; 251
     192:	85 bd       	out	0x25, r24	; 37
     194:	08 95       	ret

00000196 <pwm0_set_PB3>:
     196:	87 bd       	out	0x27, r24	; 39
     198:	08 95       	ret

0000019a <pwm0_set_PB4>:
     19a:	88 bd       	out	0x28, r24	; 40
     19c:	08 95       	ret

0000019e <pwm1_init>:
     19e:	9c 01       	movw	r18, r24
     1a0:	8a b1       	in	r24, 0x0a	; 10
     1a2:	80 61       	ori	r24, 0x10	; 16
     1a4:	8a b9       	out	0x0a, r24	; 10
     1a6:	8a b1       	in	r24, 0x0a	; 10
     1a8:	80 62       	ori	r24, 0x20	; 32
     1aa:	8a b9       	out	0x0a, r24	; 10
     1ac:	e0 e8       	ldi	r30, 0x80	; 128
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	80 68       	ori	r24, 0x80	; 128
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	8f 7b       	andi	r24, 0xBF	; 191
     1ba:	80 83       	st	Z, r24
     1bc:	90 81       	ld	r25, Z
     1be:	90 62       	ori	r25, 0x20	; 32
     1c0:	90 83       	st	Z, r25
     1c2:	90 81       	ld	r25, Z
     1c4:	9f 7e       	andi	r25, 0xEF	; 239
     1c6:	90 83       	st	Z, r25
     1c8:	a1 e8       	ldi	r26, 0x81	; 129
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	9c 91       	ld	r25, X
     1ce:	90 61       	ori	r25, 0x10	; 16
     1d0:	9c 93       	st	X, r25
     1d2:	9c 91       	ld	r25, X
     1d4:	98 60       	ori	r25, 0x08	; 8
     1d6:	9c 93       	st	X, r25
     1d8:	90 81       	ld	r25, Z
     1da:	92 60       	ori	r25, 0x02	; 2
     1dc:	90 83       	st	Z, r25
     1de:	90 81       	ld	r25, Z
     1e0:	9e 7f       	andi	r25, 0xFE	; 254
     1e2:	90 83       	st	Z, r25
     1e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     1e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     1ec:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     1f0:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     1f4:	8c 91       	ld	r24, X
     1f6:	8b 7f       	andi	r24, 0xFB	; 251
     1f8:	8c 93       	st	X, r24
     1fa:	8c 91       	ld	r24, X
     1fc:	82 60       	ori	r24, 0x02	; 2
     1fe:	8c 93       	st	X, r24
     200:	8c 91       	ld	r24, X
     202:	8e 7f       	andi	r24, 0xFE	; 254
     204:	8c 93       	st	X, r24
     206:	08 95       	ret

00000208 <pwm1_set_PD5>:
     208:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     20c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     210:	08 95       	ret

00000212 <pwm2_init>:
}

void pwm2_init(){
	// broches de PWM en sortie
//TODO_FB : Active PB0 en sortie
	DDRD = set_bit(DDRD, PD6);
     212:	8a b1       	in	r24, 0x0a	; 10
     214:	80 64       	ori	r24, 0x40	; 64
     216:	8a b9       	out	0x0a, r24	; 10
	DDRD = set_bit(DDRD, PD7);
     218:	8a b1       	in	r24, 0x0a	; 10
     21a:	80 68       	ori	r24, 0x80	; 128
     21c:	8a b9       	out	0x0a, r24	; 10
	// PEUT ETRE AUTRE CHOSE
	// 2-Initialisation du TIMER 0
	// 2.1- Mode de comparaison : "Toggle on compare match"

	
	TCCR2A = set_bit(TCCR2A,COM0A1);
     21e:	e0 eb       	ldi	r30, 0xB0	; 176
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	80 68       	ori	r24, 0x80	; 128
     226:	80 83       	st	Z, r24
	TCCR2A = set_bit(TCCR2A,COM0B1);
     228:	80 81       	ld	r24, Z
     22a:	80 62       	ori	r24, 0x20	; 32
     22c:	80 83       	st	Z, r24
	TCCR2A = clear_bit(TCCR2A,COM0A0);
     22e:	80 81       	ld	r24, Z
     230:	8f 7b       	andi	r24, 0xBF	; 191
     232:	80 83       	st	Z, r24
	TCCR2A = clear_bit(TCCR2A,COM0B0);
     234:	80 81       	ld	r24, Z
     236:	8f 7e       	andi	r24, 0xEF	; 239
     238:	80 83       	st	Z, r24
	
	
	
	// 2.2- Mode du compteur :  "PWM phase correct"
	
	TCCR2A = set_bit(TCCR2A,WGM00);
     23a:	80 81       	ld	r24, Z
     23c:	81 60       	ori	r24, 0x01	; 1
     23e:	80 83       	st	Z, r24
	TCCR2A = clear_bit(TCCR2A,WGM01);
     240:	80 81       	ld	r24, Z
     242:	8d 7f       	andi	r24, 0xFD	; 253
     244:	80 83       	st	Z, r24
	
	// 2.3- Fixer la valeur initiale du compteur 0 à 0
	
	TCNT2 = 0;
     246:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	
	// 2.4- Facteur de division de fréquence : 1
	
	TCCR2B = set_bit(TCCR2B,CS00);
     24a:	e1 eb       	ldi	r30, 0xB1	; 177
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	81 60       	ori	r24, 0x01	; 1
     252:	80 83       	st	Z, r24
	TCCR2B = clear_bit(TCCR2B,CS01);
     254:	80 81       	ld	r24, Z
     256:	8d 7f       	andi	r24, 0xFD	; 253
     258:	80 83       	st	Z, r24
	TCCR2B = clear_bit(TCCR2B,CS02);
     25a:	80 81       	ld	r24, Z
     25c:	8b 7f       	andi	r24, 0xFB	; 251
     25e:	80 83       	st	Z, r24
     260:	08 95       	ret

00000262 <pwm2_set_PD7>:
	


void pwm2_set_PD7(uint8_t limit){
	// Fixer le rapport cyclique à la valeur de duty
	OCR2A = limit;	
     262:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
     266:	08 95       	ret

00000268 <pwm2_set_PD6>:
}

void pwm2_set_PD6(uint8_t limit){
	// Fixer le rapport cyclique à la valeur de duty
	OCR2B = limit;
     268:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
     26c:	08 95       	ret

0000026e <fifo_init>:
void fifo_clean(fifo_t* fifo){
	
	fifo->in_offset = fifo->out_offset;
	fifo->is_full = FALSE;
	fifo->is_empty = TRUE;
	fifo->nb_line = 0;
     26e:	fc 01       	movw	r30, r24
     270:	71 83       	std	Z+1, r23	; 0x01
     272:	60 83       	st	Z, r22
     274:	42 83       	std	Z+2, r20	; 0x02
     276:	13 82       	std	Z+3, r1	; 0x03
     278:	14 82       	std	Z+4, r1	; 0x04
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	85 83       	std	Z+5, r24	; 0x05
     27e:	16 82       	std	Z+6, r1	; 0x06
     280:	17 82       	std	Z+7, r1	; 0x07
     282:	08 95       	ret

00000284 <fifo_push>:
     284:	fc 01       	movw	r30, r24
     286:	86 81       	ldd	r24, Z+6	; 0x06
     288:	81 11       	cpse	r24, r1
     28a:	1f c0       	rjmp	.+62     	; 0x2ca <fifo_push+0x46>
     28c:	a0 81       	ld	r26, Z
     28e:	b1 81       	ldd	r27, Z+1	; 0x01
     290:	83 81       	ldd	r24, Z+3	; 0x03
     292:	a8 0f       	add	r26, r24
     294:	b1 1d       	adc	r27, r1
     296:	6c 93       	st	X, r22
     298:	15 82       	std	Z+5, r1	; 0x05
     29a:	23 81       	ldd	r18, Z+3	; 0x03
     29c:	42 2f       	mov	r20, r18
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	82 81       	ldd	r24, Z+2	; 0x02
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	48 17       	cp	r20, r24
     2a8:	59 07       	cpc	r21, r25
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <fifo_push+0x2c>
     2ac:	13 82       	std	Z+3, r1	; 0x03
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <fifo_push+0x30>
     2b0:	2f 5f       	subi	r18, 0xFF	; 255
     2b2:	23 83       	std	Z+3, r18	; 0x03
     2b4:	6a 30       	cpi	r22, 0x0A	; 10
     2b6:	19 f4       	brne	.+6      	; 0x2be <fifo_push+0x3a>
     2b8:	87 81       	ldd	r24, Z+7	; 0x07
     2ba:	8f 5f       	subi	r24, 0xFF	; 255
     2bc:	87 83       	std	Z+7, r24	; 0x07
     2be:	93 81       	ldd	r25, Z+3	; 0x03
     2c0:	84 81       	ldd	r24, Z+4	; 0x04
     2c2:	98 13       	cpse	r25, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <fifo_push+0x46>
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	86 83       	std	Z+6, r24	; 0x06
     2ca:	08 95       	ret

000002cc <fifo_pop>:
     2cc:	fc 01       	movw	r30, r24
     2ce:	85 81       	ldd	r24, Z+5	; 0x05
     2d0:	81 11       	cpse	r24, r1
     2d2:	20 c0       	rjmp	.+64     	; 0x314 <fifo_pop+0x48>
     2d4:	a0 81       	ld	r26, Z
     2d6:	b1 81       	ldd	r27, Z+1	; 0x01
     2d8:	94 81       	ldd	r25, Z+4	; 0x04
     2da:	49 2f       	mov	r20, r25
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	a4 0f       	add	r26, r20
     2e0:	b5 1f       	adc	r27, r21
     2e2:	8c 91       	ld	r24, X
     2e4:	16 82       	std	Z+6, r1	; 0x06
     2e6:	22 81       	ldd	r18, Z+2	; 0x02
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	31 09       	sbc	r19, r1
     2ee:	42 17       	cp	r20, r18
     2f0:	53 07       	cpc	r21, r19
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <fifo_pop+0x2c>
     2f4:	14 82       	std	Z+4, r1	; 0x04
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <fifo_pop+0x30>
     2f8:	9f 5f       	subi	r25, 0xFF	; 255
     2fa:	94 83       	std	Z+4, r25	; 0x04
     2fc:	8a 30       	cpi	r24, 0x0A	; 10
     2fe:	19 f4       	brne	.+6      	; 0x306 <fifo_pop+0x3a>
     300:	97 81       	ldd	r25, Z+7	; 0x07
     302:	91 50       	subi	r25, 0x01	; 1
     304:	97 83       	std	Z+7, r25	; 0x07
     306:	24 81       	ldd	r18, Z+4	; 0x04
     308:	93 81       	ldd	r25, Z+3	; 0x03
     30a:	29 13       	cpse	r18, r25
     30c:	04 c0       	rjmp	.+8      	; 0x316 <fifo_pop+0x4a>
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	95 83       	std	Z+5, r25	; 0x05
     312:	08 95       	ret
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	08 95       	ret

00000318 <fifo_is_empty>:


bool fifo_is_empty(fifo_t* fifo) {

    return fifo->is_empty;
}
     318:	fc 01       	movw	r30, r24
     31a:	85 81       	ldd	r24, Z+5	; 0x05
     31c:	08 95       	ret

0000031e <clock_data>:

    COMMAND_MODE();

    clock_data(0b00010000 | right_left);     //Cursor or display shift

    DATA_MODE();
     31e:	88 b9       	out	0x08, r24	; 8
     320:	85 e8       	ldi	r24, 0x85	; 133
     322:	8a 95       	dec	r24
     324:	f1 f7       	brne	.-4      	; 0x322 <clock_data+0x4>
     326:	00 00       	nop
     328:	82 b1       	in	r24, 0x02	; 2
     32a:	8f 77       	andi	r24, 0x7F	; 127
     32c:	82 b9       	out	0x02, r24	; 2
     32e:	85 e8       	ldi	r24, 0x85	; 133
     330:	8a 95       	dec	r24
     332:	f1 f7       	brne	.-4      	; 0x330 <clock_data+0x12>
     334:	00 00       	nop
     336:	82 b1       	in	r24, 0x02	; 2
     338:	80 68       	ori	r24, 0x80	; 128
     33a:	82 b9       	out	0x02, r24	; 2
     33c:	08 95       	ret

0000033e <hd44780_clear_display>:
     33e:	82 b1       	in	r24, 0x02	; 2
     340:	8f 7d       	andi	r24, 0xDF	; 223
     342:	82 b9       	out	0x02, r24	; 2
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     34a:	8f e9       	ldi	r24, 0x9F	; 159
     34c:	9f e0       	ldi	r25, 0x0F	; 15
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <hd44780_clear_display+0x10>
     352:	00 c0       	rjmp	.+0      	; 0x354 <hd44780_clear_display+0x16>
     354:	00 00       	nop
     356:	82 b1       	in	r24, 0x02	; 2
     358:	80 62       	ori	r24, 0x20	; 32
     35a:	82 b9       	out	0x02, r24	; 2
     35c:	08 95       	ret

0000035e <hd44780_set_entry_mode>:
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	11 f4       	brne	.+4      	; 0x366 <hd44780_set_entry_mode+0x8>
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	01 c0       	rjmp	.+2      	; 0x368 <hd44780_set_entry_mode+0xa>
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	92 b1       	in	r25, 0x02	; 2
     36a:	9f 7d       	andi	r25, 0xDF	; 223
     36c:	92 b9       	out	0x02, r25	; 2
     36e:	84 60       	ori	r24, 0x04	; 4
     370:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     374:	82 b1       	in	r24, 0x02	; 2
     376:	80 62       	ori	r24, 0x20	; 32
     378:	82 b9       	out	0x02, r24	; 2
     37a:	08 95       	ret

0000037c <hd44780_set_display_control>:
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	11 f0       	breq	.+4      	; 0x384 <hd44780_set_display_control+0x8>
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	01 c0       	rjmp	.+2      	; 0x386 <hd44780_set_display_control+0xa>
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	09 f4       	brne	.+2      	; 0x38c <hd44780_set_display_control+0x10>
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	41 30       	cpi	r20, 0x01	; 1
     38e:	09 f4       	brne	.+2      	; 0x392 <hd44780_set_display_control+0x16>
     390:	81 60       	ori	r24, 0x01	; 1
     392:	92 b1       	in	r25, 0x02	; 2
     394:	9f 7d       	andi	r25, 0xDF	; 223
     396:	92 b9       	out	0x02, r25	; 2
     398:	88 60       	ori	r24, 0x08	; 8
     39a:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     39e:	82 b1       	in	r24, 0x02	; 2
     3a0:	80 62       	ori	r24, 0x20	; 32
     3a2:	82 b9       	out	0x02, r24	; 2
     3a4:	08 95       	ret

000003a6 <hd44780_init>:
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	c6 2f       	mov	r28, r22
     3ac:	d4 2f       	mov	r29, r20
     3ae:	98 e3       	ldi	r25, 0x38	; 56
     3b0:	98 b9       	out	0x08, r25	; 8
     3b2:	92 b1       	in	r25, 0x02	; 2
     3b4:	9f 7d       	andi	r25, 0xDF	; 223
     3b6:	92 b9       	out	0x02, r25	; 2
     3b8:	92 b1       	in	r25, 0x02	; 2
     3ba:	9f 7b       	andi	r25, 0xBF	; 191
     3bc:	92 b9       	out	0x02, r25	; 2
     3be:	9f ef       	ldi	r25, 0xFF	; 255
     3c0:	97 b9       	out	0x07, r25	; 7
     3c2:	91 b1       	in	r25, 0x01	; 1
     3c4:	90 6e       	ori	r25, 0xE0	; 224
     3c6:	91 b9       	out	0x01, r25	; 1
     3c8:	ef e1       	ldi	r30, 0x1F	; 31
     3ca:	fe e4       	ldi	r31, 0x4E	; 78
     3cc:	31 97       	sbiw	r30, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <hd44780_init+0x26>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <hd44780_init+0x2c>
     3d2:	00 00       	nop
     3d4:	92 b1       	in	r25, 0x02	; 2
     3d6:	9f 77       	andi	r25, 0x7F	; 127
     3d8:	92 b9       	out	0x02, r25	; 2
     3da:	ef e0       	ldi	r30, 0x0F	; 15
     3dc:	f7 e2       	ldi	r31, 0x27	; 39
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	f1 f7       	brne	.-4      	; 0x3de <hd44780_init+0x38>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <hd44780_init+0x3e>
     3e4:	00 00       	nop
     3e6:	92 b1       	in	r25, 0x02	; 2
     3e8:	90 68       	ori	r25, 0x80	; 128
     3ea:	92 b9       	out	0x02, r25	; 2
     3ec:	ef e0       	ldi	r30, 0x0F	; 15
     3ee:	f7 e2       	ldi	r31, 0x27	; 39
     3f0:	31 97       	sbiw	r30, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <hd44780_init+0x4a>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <hd44780_init+0x50>
     3f6:	00 00       	nop
     3f8:	92 b1       	in	r25, 0x02	; 2
     3fa:	9f 77       	andi	r25, 0x7F	; 127
     3fc:	92 b9       	out	0x02, r25	; 2
     3fe:	e7 ec       	ldi	r30, 0xC7	; 199
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     408:	00 00       	nop
     40a:	92 b1       	in	r25, 0x02	; 2
     40c:	90 68       	ori	r25, 0x80	; 128
     40e:	92 b9       	out	0x02, r25	; 2
     410:	e7 ec       	ldi	r30, 0xC7	; 199
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	31 97       	sbiw	r30, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     41a:	00 00       	nop
     41c:	92 b1       	in	r25, 0x02	; 2
     41e:	9f 77       	andi	r25, 0x7F	; 127
     420:	92 b9       	out	0x02, r25	; 2
     422:	ef ef       	ldi	r30, 0xFF	; 255
     424:	f5 e0       	ldi	r31, 0x05	; 5
     426:	31 97       	sbiw	r30, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
     42e:	92 b1       	in	r25, 0x02	; 2
     430:	90 68       	ori	r25, 0x80	; 128
     432:	92 b9       	out	0x02, r25	; 2
     434:	0e 94 af 01 	call	0x35e	; 0x35e <hd44780_set_entry_mode>
     438:	4d 2f       	mov	r20, r29
     43a:	6c 2f       	mov	r22, r28
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 be 01 	call	0x37c	; 0x37c <hd44780_set_display_control>
     442:	0e 94 9f 01 	call	0x33e	; 0x33e <hd44780_clear_display>
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <hd44780_set_cursor_position>:
     44c:	61 30       	cpi	r22, 0x01	; 1
     44e:	11 f0       	breq	.+4      	; 0x454 <hd44780_set_cursor_position+0x8>
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	01 c0       	rjmp	.+2      	; 0x456 <hd44780_set_cursor_position+0xa>
     454:	90 e4       	ldi	r25, 0x40	; 64
     456:	89 0f       	add	r24, r25
     458:	92 b1       	in	r25, 0x02	; 2
     45a:	9f 7d       	andi	r25, 0xDF	; 223
     45c:	92 b9       	out	0x02, r25	; 2
     45e:	80 68       	ori	r24, 0x80	; 128
     460:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     464:	82 b1       	in	r24, 0x02	; 2
     466:	80 62       	ori	r24, 0x20	; 32
     468:	82 b9       	out	0x02, r24	; 2
     46a:	08 95       	ret

0000046c <hd44780_write_char>:
}


void hd44780_write_char(char character){
     46c:	e8 2f       	mov	r30, r24
	const char MAX_CHAR = 255;
#else
	const char MAX_CHAR = CHAR_LEFT_ARROW;
#endif

    DATA_MODE();
     46e:	82 b1       	in	r24, 0x02	; 2
     470:	80 62       	ori	r24, 0x20	; 32
     472:	82 b9       	out	0x02, r24	; 2

    if((character >= ' ') && (character <= MAX_CHAR)){
     474:	e0 32       	cpi	r30, 0x20	; 32
     476:	20 f0       	brcs	.+8      	; 0x480 <hd44780_write_char+0x14>

            clock_data(character);
     478:	8e 2f       	mov	r24, r30
     47a:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     47e:	08 95       	ret
    }

    else{
		
		switch(character){
     480:	8e 2f       	mov	r24, r30
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	fc 01       	movw	r30, r24
     486:	e0 5c       	subi	r30, 0xC0	; 192
     488:	f1 09       	sbc	r31, r1
     48a:	ed 33       	cpi	r30, 0x3D	; 61
     48c:	f1 05       	cpc	r31, r1
     48e:	d0 f4       	brcc	.+52     	; 0x4c4 <hd44780_write_char+0x58>
     490:	e2 5c       	subi	r30, 0xC2	; 194
     492:	ff 4f       	sbci	r31, 0xFF	; 255
     494:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__tablejump2__>
		case 0xC0:	//À
		case 0xC1:	//A accent aigue
		case 0xC2:	//Â
		case 0xC3:	//A ???
		case 0xC4:	//Ä
			character = 'A';
     498:	81 e4       	ldi	r24, 0x41	; 65
     49a:	17 c0       	rjmp	.+46     	; 0x4ca <hd44780_write_char+0x5e>
					
		case 0xC8:	//È
		case 0xC9:	//É
		case 0xCA:	//Ê
		case 0xCB:	//Ë
			character = 'E';
     49c:	85 e4       	ldi	r24, 0x45	; 69
			break;
     49e:	15 c0       	rjmp	.+42     	; 0x4ca <hd44780_write_char+0x5e>
					
		case 0xCC:	//Ì
		case 0xCD:	//I accent aigue
		case 0xCE:	//Î
		case 0xCF:	//Ï
			character = 'I';
     4a0:	89 e4       	ldi	r24, 0x49	; 73
			break;
     4a2:	13 c0       	rjmp	.+38     	; 0x4ca <hd44780_write_char+0x5e>
		case 0xD2:	//Ò
		case 0xD3:	//O accent aigue
		case 0xD4:	//Ô
		case 0xD5:	//O ???
		case 0xD6:	//Ö
			character = 'O';
     4a4:	8f e4       	ldi	r24, 0x4F	; 79
			break;
     4a6:	11 c0       	rjmp	.+34     	; 0x4ca <hd44780_write_char+0x5e>
					
		case 0xD9:	//Ù
		case 0xDA:	//U accent aigue
		case 0xDB:	//Û
		case 0xDC:	//Ü
			character = 'U';
     4a8:	85 e5       	ldi	r24, 0x55	; 85
			break;
     4aa:	0f c0       	rjmp	.+30     	; 0x4ca <hd44780_write_char+0x5e>
		case 0xE0:	//à
		case 0xE1:	//a accent aigue
		case 0xE2:	//â
		case 0xE3:	//a ???
		case 0xE4:	//ä
			character = 'a';
     4ac:	81 e6       	ldi	r24, 0x61	; 97
			break;
     4ae:	0d c0       	rjmp	.+26     	; 0x4ca <hd44780_write_char+0x5e>
		
		case 0xE7:	//ç
			character = 'c';
     4b0:	83 e6       	ldi	r24, 0x63	; 99
			break;
     4b2:	0b c0       	rjmp	.+22     	; 0x4ca <hd44780_write_char+0x5e>
			
		case 0xE8:	//è
		case 0xE9:	//é
		case 0xEA:	//ê
		case 0xEB:	//ë
			character = 'e';
     4b4:	85 e6       	ldi	r24, 0x65	; 101
			break;
     4b6:	09 c0       	rjmp	.+18     	; 0x4ca <hd44780_write_char+0x5e>
			
		case 0xEC:	//ì
		case 0xED:	//i accent aigue
		case 0xEE:	//î
		case 0xEF:	//ï
			character = 'i';
     4b8:	89 e6       	ldi	r24, 0x69	; 105
			break;
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <hd44780_write_char+0x5e>
		case 0xF2:	//ò
		case 0xF3:	//o accent aigue
		case 0xF4:	//ô
		case 0xF5:	//o ???
		case 0xF6:	//ö
			character = 'o';
     4bc:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <hd44780_write_char+0x5e>
			
		case 0xF9:	//ù
		case 0xFA:	//u accent aigue
		case 0xFB:	//û
		case 0xFC:	//ü
			character = 'u';
     4c0:	85 e7       	ldi	r24, 0x75	; 117
			break;
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <hd44780_write_char+0x5e>
		
		default:
			character = 0b10100101;  //une boule pas rapport
     4c4:	85 ea       	ldi	r24, 0xA5	; 165
			break;
     4c6:	01 c0       	rjmp	.+2      	; 0x4ca <hd44780_write_char+0x5e>
		case 0xC4:	//Ä
			character = 'A';
			break;
					
		case 0xC7:	//Ç
			character = 'C';
     4c8:	83 e4       	ldi	r24, 0x43	; 67
		default:
			character = 0b10100101;  //une boule pas rapport
			break;
		}				

        clock_data(character);  //une boule pas rapport
     4ca:	0e 94 8f 01 	call	0x31e	; 0x31e <clock_data>
     4ce:	08 95       	ret

000004d0 <lcd_init>:
Global functions LCD
******************************************************************************/

void lcd_init(void){

    hd44780_init(TRUE, TRUE, FALSE);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	61 e0       	ldi	r22, 0x01	; 1
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <hd44780_init>

    local_index = 0;
     4da:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <local_index>
	clear_required_flag = FALSE;
     4de:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
     4e2:	08 95       	ret

000004e4 <lcd_clear_display>:
}


void lcd_clear_display(){

    hd44780_clear_display();
     4e4:	0e 94 9f 01 	call	0x33e	; 0x33e <hd44780_clear_display>

    local_index = 0;
     4e8:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <local_index>
     4ec:	08 95       	ret

000004ee <lcd_set_cursor_position>:
}


void lcd_set_cursor_position(uint8_t col, uint8_t row){
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29

    if((col >= 0) && (col < LCD_NB_COL) && (row >= 0) && (row < LCD_NB_ROW)){
     4f2:	80 31       	cpi	r24, 0x10	; 16
     4f4:	68 f4       	brcc	.+26     	; 0x510 <lcd_set_cursor_position+0x22>
     4f6:	62 30       	cpi	r22, 0x02	; 2
     4f8:	58 f4       	brcc	.+22     	; 0x510 <lcd_set_cursor_position+0x22>
     4fa:	d6 2f       	mov	r29, r22
     4fc:	c8 2f       	mov	r28, r24

        hd44780_set_cursor_position(col, row);
     4fe:	0e 94 26 02 	call	0x44c	; 0x44c <hd44780_set_cursor_position>

        local_index = col + row * LCD_NB_COL;
     502:	8c 2f       	mov	r24, r28
     504:	90 e1       	ldi	r25, 0x10	; 16
     506:	d9 9f       	mul	r29, r25
     508:	80 0d       	add	r24, r0
     50a:	11 24       	eor	r1, r1
     50c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
    }
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <index_to_col>:
/* lcd */

uint8_t index_to_col(uint8_t index){

    return index % LCD_NB_COL;
}
     516:	8f 70       	andi	r24, 0x0F	; 15
     518:	08 95       	ret

0000051a <index_to_row>:


uint8_t index_to_row(uint8_t index){

    return index / LCD_NB_COL;
}
     51a:	82 95       	swap	r24
     51c:	8f 70       	andi	r24, 0x0F	; 15
     51e:	08 95       	ret

00000520 <shift_local_index>:

bool shift_local_index(bool foward){
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	18 2f       	mov	r17, r24

    uint8_t previous_row;

    previous_row = index_to_row(local_index);
     528:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <local_index>
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     532:	d8 2f       	mov	r29, r24

    /* Si on est dans le sens foward */
    if(foward == TRUE){
     534:	11 30       	cpi	r17, 0x01	; 1
     536:	49 f4       	brne	.+18     	; 0x54a <shift_local_index+0x2a>

        /* Si on est à la fin */
        if(local_index >= MAX_INDEX - 1){
     538:	cf 31       	cpi	r28, 0x1F	; 31
     53a:	18 f0       	brcs	.+6      	; 0x542 <shift_local_index+0x22>

			local_index = 0;
     53c:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <local_index>
     540:	0d c0       	rjmp	.+26     	; 0x55c <shift_local_index+0x3c>
        }

        else{

            local_index++;
     542:	cf 5f       	subi	r28, 0xFF	; 255
     544:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
     548:	09 c0       	rjmp	.+18     	; 0x55c <shift_local_index+0x3c>

    /* Si on est dans le sens décrémental foward ou incrémental backward*/
    else{

        /* Si on est au début */
        if(local_index <= 0){
     54a:	c1 11       	cpse	r28, r1
     54c:	04 c0       	rjmp	.+8      	; 0x556 <shift_local_index+0x36>
			
            local_index = MAX_INDEX - 1;
     54e:	8f e1       	ldi	r24, 0x1F	; 31
     550:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
     554:	03 c0       	rjmp	.+6      	; 0x55c <shift_local_index+0x3c>
        }

        else{

            local_index--;
     556:	c1 50       	subi	r28, 0x01	; 1
     558:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
        }
    }

    /* Si la row actuelle ne correspond pas à l'ancienne il va falloir manuellement
    déplacer le curseur */
    return (previous_row != index_to_row(local_index));
     55c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <local_index>
     560:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	d8 13       	cpse	r29, r24
     568:	01 c0       	rjmp	.+2      	; 0x56c <shift_local_index+0x4c>
     56a:	90 e0       	ldi	r25, 0x00	; 0
}
     56c:	89 2f       	mov	r24, r25
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	08 95       	ret

00000576 <lcd_shift_cursor>:
        local_index = col + row * LCD_NB_COL;
    }
}


void lcd_shift_cursor(lcd_shift_e shift){
     576:	cf 93       	push	r28
     578:	df 93       	push	r29

    switch(shift){
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	88 30       	cpi	r24, 0x08	; 8
     57e:	91 05       	cpc	r25, r1
     580:	08 f0       	brcs	.+2      	; 0x584 <lcd_shift_cursor+0xe>
     582:	51 c0       	rjmp	.+162    	; 0x626 <lcd_shift_cursor+0xb0>
     584:	fc 01       	movw	r30, r24
     586:	e5 58       	subi	r30, 0x85	; 133
     588:	ff 4f       	sbci	r31, 0xFF	; 255
     58a:	0c 94 5c 09 	jmp	0x12b8	; 0x12b8 <__tablejump2__>
    case LCD_SHIFT_RIGHT:

        shift_local_index(TRUE);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 90 02 	call	0x520	; 0x520 <shift_local_index>

        break;
     594:	48 c0       	rjmp	.+144    	; 0x626 <lcd_shift_cursor+0xb0>

    case LCD_SHIFT_LEFT:

        shift_local_index(FALSE);
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 90 02 	call	0x520	; 0x520 <shift_local_index>

        break;
     59c:	44 c0       	rjmp	.+136    	; 0x626 <lcd_shift_cursor+0xb0>

    case LCD_SHIFT_UP:

		// Si on est sur la ligne du haut
        if(index_to_row(local_index) <= 0){
     59e:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <local_index>
     5a2:	8c 2f       	mov	r24, r28
     5a4:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     5a8:	81 11       	cpse	r24, r1
     5aa:	07 c0       	rjmp	.+14     	; 0x5ba <lcd_shift_cursor+0x44>

			// On se rend à la fin moins une ligne
            local_index += (MAX_INDEX - LCD_NB_COL);
     5ac:	c0 5f       	subi	r28, 0xF0	; 240
     5ae:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
			
			clear_required_flag = TRUE;
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
     5b8:	36 c0       	rjmp	.+108    	; 0x626 <lcd_shift_cursor+0xb0>
        }

        else{
			
			// On recule d'une ligne
            local_index -= LCD_NB_COL;
     5ba:	c0 51       	subi	r28, 0x10	; 16
     5bc:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
     5c0:	32 c0       	rjmp	.+100    	; 0x626 <lcd_shift_cursor+0xb0>
        break;

    case LCD_SHIFT_DOWN:

		// Si on est rendu à la dernière ligne
        if(index_to_row(local_index) >= LCD_NB_ROW - 1){
     5c2:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <local_index>
     5c6:	8c 2f       	mov	r24, r28
     5c8:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     5cc:	88 23       	and	r24, r24
     5ce:	39 f0       	breq	.+14     	; 0x5de <lcd_shift_cursor+0x68>

			// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
            local_index %= LCD_NB_COL;
     5d0:	cf 70       	andi	r28, 0x0F	; 15
     5d2:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
			
			clear_required_flag = TRUE;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
     5dc:	24 c0       	rjmp	.+72     	; 0x626 <lcd_shift_cursor+0xb0>
        }

        else{

			// On avance d'une ligne
            local_index += LCD_NB_COL;
     5de:	c0 5f       	subi	r28, 0xF0	; 240
     5e0:	c0 93 41 01 	sts	0x0141, r28	; 0x800141 <local_index>
     5e4:	20 c0       	rjmp	.+64     	; 0x626 <lcd_shift_cursor+0xb0>

        break;
	
	case LCD_SHIFT_END:
	
		local_index = ((index_to_row(local_index) + 1) * LCD_NB_COL) - 1;
     5e6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <local_index>
     5ea:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	01 96       	adiw	r24, 0x01	; 1
     5f2:	82 95       	swap	r24
     5f4:	80 7f       	andi	r24, 0xF0	; 240
     5f6:	81 50       	subi	r24, 0x01	; 1
     5f8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
		
		break;
     5fc:	14 c0       	rjmp	.+40     	; 0x626 <lcd_shift_cursor+0xb0>
		
	case LCD_SHIFT_START:
		
		local_index = index_to_row(local_index) * LCD_NB_COL;
     5fe:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <local_index>
     602:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     606:	82 95       	swap	r24
     608:	80 7f       	andi	r24, 0xF0	; 240
     60a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
		
		break;
     60e:	0b c0       	rjmp	.+22     	; 0x626 <lcd_shift_cursor+0xb0>
		
	case LCD_SHIFT_TOP:
	
		// On ne garde que le numéro de colone (donc sa ramène sur la première ligne)
		local_index %= LCD_NB_COL;
     610:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <local_index>
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
		
		break;
     61a:	05 c0       	rjmp	.+10     	; 0x626 <lcd_shift_cursor+0xb0>
		
	case LCD_SHIFT_BOTTOM:
		
		// On se rend à la fin moins une ligne
		local_index += (MAX_INDEX - LCD_NB_COL);
     61c:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <local_index>
     620:	80 5f       	subi	r24, 0xF0	; 240
     622:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <local_index>
		
		break;
	}		

    hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
     626:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <local_index>
     62a:	8c 2f       	mov	r24, r28
     62c:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     630:	d8 2f       	mov	r29, r24
     632:	8c 2f       	mov	r24, r28
     634:	0e 94 8b 02 	call	0x516	; 0x516 <index_to_col>
     638:	6d 2f       	mov	r22, r29
     63a:	0e 94 26 02 	call	0x44c	; 0x44c <hd44780_set_cursor_position>
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <lcd_write_char>:


void lcd_write_char(char character){
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	c8 2f       	mov	r28, r24

    bool unsynced;
	
	// Si il s'agit d'un des 32 premier caractères ascii, on s'attend à un contrôle
	// plutôt que l'affichage d'un caractère
	if(character < ' '){
     64a:	80 32       	cpi	r24, 0x20	; 32
     64c:	68 f4       	brcc	.+26     	; 0x668 <lcd_write_char+0x24>
		
		switch (character){
     64e:	8a 30       	cpi	r24, 0x0A	; 10
     650:	19 f0       	breq	.+6      	; 0x658 <lcd_write_char+0x14>
     652:	8d 30       	cpi	r24, 0x0D	; 13
     654:	29 f0       	breq	.+10     	; 0x660 <lcd_write_char+0x1c>
     656:	24 c0       	rjmp	.+72     	; 0x6a0 <lcd_write_char+0x5c>
		case '\n':	// 0x0A	new line
			lcd_shift_cursor(LCD_SHIFT_DOWN);
     658:	83 e0       	ldi	r24, 0x03	; 3
     65a:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_shift_cursor>
			break;
     65e:	20 c0       	rjmp	.+64     	; 0x6a0 <lcd_write_char+0x5c>
		case '\r':
			lcd_shift_cursor(LCD_SHIFT_START);
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_shift_cursor>
			break;
     666:	1c c0       	rjmp	.+56     	; 0x6a0 <lcd_write_char+0x5c>
		}		
	}

	else{
		
		if(clear_required_flag == TRUE){
     668:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	21 f4       	brne	.+8      	; 0x678 <lcd_write_char+0x34>
			
			hd44780_clear_display();
     670:	0e 94 9f 01 	call	0x33e	; 0x33e <hd44780_clear_display>
			//hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
			clear_required_flag = FALSE;
     674:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
		}
		
		hd44780_write_char(character);
     678:	8c 2f       	mov	r24, r28
     67a:	0e 94 36 02 	call	0x46c	; 0x46c <hd44780_write_char>

		unsynced = shift_local_index(TRUE);
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 90 02 	call	0x520	; 0x520 <shift_local_index>

		if(unsynced == TRUE){
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	61 f4       	brne	.+24     	; 0x6a0 <lcd_write_char+0x5c>

			hd44780_set_cursor_position(index_to_col(local_index), index_to_row(local_index));
     688:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <local_index>
     68c:	8c 2f       	mov	r24, r28
     68e:	0e 94 8d 02 	call	0x51a	; 0x51a <index_to_row>
     692:	d8 2f       	mov	r29, r24
     694:	8c 2f       	mov	r24, r28
     696:	0e 94 8b 02 	call	0x516	; 0x516 <index_to_col>
     69a:	6d 2f       	mov	r22, r29
     69c:	0e 94 26 02 	call	0x44c	; 0x44c <hd44780_set_cursor_position>
		}
	}
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <lcd_write_string>:


void lcd_write_string(const char* string){
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	8c 01       	movw	r16, r24

    uint8_t index = 0;
     6ae:	c0 e0       	ldi	r28, 0x00	; 0

    while(string[index] != '\0'){
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <lcd_write_string+0x12>

        lcd_write_char(string[index]);
     6b2:	0e 94 22 03 	call	0x644	; 0x644 <lcd_write_char>

        index++;
     6b6:	cf 5f       	subi	r28, 0xFF	; 255

void lcd_write_string(const char* string){

    uint8_t index = 0;

    while(string[index] != '\0'){
     6b8:	f8 01       	movw	r30, r16
     6ba:	ec 0f       	add	r30, r28
     6bc:	f1 1d       	adc	r31, r1
     6be:	80 81       	ld	r24, Z
     6c0:	81 11       	cpse	r24, r1
     6c2:	f7 cf       	rjmp	.-18     	; 0x6b2 <lcd_write_string+0xc>

        lcd_write_char(string[index]);

        index++;
    }
}
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <main>:

void display_heartbeat();

//extern uint16_t clock;

int main(void){
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	c7 55       	subi	r28, 0x57	; 87
     6d6:	d1 09       	sbc	r29, r1
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
	
	//*******Fonction******
	uart_init(UART_0);
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 1c 05 	call	0xa38	; 0xa38 <uart_init>
	lcd_init();
     6e8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <lcd_init>
	pwm0_init();
     6ec:	0e 94 a8 00 	call	0x150	; 0x150 <pwm0_init>
	pwm1_init(20000);
     6f0:	80 e2       	ldi	r24, 0x20	; 32
     6f2:	9e e4       	ldi	r25, 0x4E	; 78
     6f4:	0e 94 cf 00 	call	0x19e	; 0x19e <pwm1_init>
	pwm2_init();
     6f8:	0e 94 09 01 	call	0x212	; 0x212 <pwm2_init>


	sei();
     6fc:	78 94       	sei

	
	//*******Uint******
	uint8_t x = 0;						// Position Joystick X
     6fe:	19 82       	std	Y+1, r1	; 0x01
	uint8_t y = 1;						// Position Joystick Y
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = 0;						// Position potentiomètre
     704:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t mode = 0;					// Variable selection des mondes 1: Déplacement 2: Tir SW1
     706:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t moteurLanceur = 0;			// Activation du moteur de tir SW2
     708:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t servoMoteurLanceur = 0;		// Activation du servo-moteur tir SW3
     70a:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t joystick = 0;				// Bouton JoyStick pour R et D
     70c:	1f 82       	std	Y+7, r1	; 0x07
	
	
	//******Strings*****
	char message[40] = {'\0'};
     70e:	88 e2       	ldi	r24, 0x28	; 40
     710:	fe 01       	movw	r30, r28
     712:	38 96       	adiw	r30, 0x08	; 8
     714:	df 01       	movw	r26, r30
     716:	98 2f       	mov	r25, r24
     718:	1d 92       	st	X+, r1
     71a:	9a 95       	dec	r25
     71c:	e9 f7       	brne	.-6      	; 0x718 <main+0x4c>
	char str    [40] = {'\0'};
     71e:	b8 96       	adiw	r30, 0x28	; 40
     720:	df 01       	movw	r26, r30
     722:	1d 92       	st	X+, r1
     724:	8a 95       	dec	r24
     726:	e9 f7       	brne	.-6      	; 0x722 <main+0x56>
	
		
	DDRB = clear_bits(DDRB, 0b0001111);	// REFACTOR
     728:	84 b1       	in	r24, 0x04	; 4
     72a:	80 7f       	andi	r24, 0xF0	; 240
     72c:	84 b9       	out	0x04, r24	; 4
	DDRB = set_bits(DDRB, 0b0001111);	// REFACTOR
     72e:	84 b1       	in	r24, 0x04	; 4
     730:	8f 60       	ori	r24, 0x0F	; 15
     732:	84 b9       	out	0x04, r24	; 4
		
	while (1)
	{
		
		// Lecture des données reçues par le véhicule
		if (!uart_is_rx_buffer_empty(UART_0)){
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	0e 94 6d 05 	call	0xada	; 0xada <uart_is_rx_buffer_empty>
     73a:	81 11       	cpse	r24, r1
     73c:	76 c0       	rjmp	.+236    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>

				lcd_clear_display();
     73e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <lcd_clear_display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     742:	8f e3       	ldi	r24, 0x3F	; 63
     744:	9c e9       	ldi	r25, 0x9C	; 156
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	f1 f7       	brne	.-4      	; 0x746 <main+0x7a>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x80>
     74c:	00 00       	nop
				_delay_ms(20);
				uart_get_string(UART_0,message,151);
     74e:	7e 01       	movw	r14, r28
     750:	98 e0       	ldi	r25, 0x08	; 8
     752:	e9 0e       	add	r14, r25
     754:	f1 1c       	adc	r15, r1
     756:	47 e9       	ldi	r20, 0x97	; 151
     758:	b7 01       	movw	r22, r14
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <uart_get_string>

				sscanf(message,  "X%03dY%03dZ%03dm%dM%dL%dD%d", &x, &y, &z, &mode, &moteurLanceur, &servoMoteurLanceur, &joystick);
     760:	ce 01       	movw	r24, r28
     762:	07 96       	adiw	r24, 0x07	; 7
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	9f 93       	push	r25
     778:	8f 93       	push	r24
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	9f 93       	push	r25
     77e:	8f 93       	push	r24
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	01 97       	sbiw	r24, 0x01	; 1
     788:	9f 93       	push	r25
     78a:	8f 93       	push	r24
     78c:	01 e0       	ldi	r16, 0x01	; 1
     78e:	11 e0       	ldi	r17, 0x01	; 1
     790:	1f 93       	push	r17
     792:	0f 93       	push	r16
     794:	ff 92       	push	r15
     796:	ef 92       	push	r14
     798:	0e 94 84 09 	call	0x1308	; 0x1308 <sscanf>
				//sprintf(str, "%s", message);
				
				sprintf(str, "X%03dY%03dZ%03dm%dM%dL%dD%d", x, y, z, mode, moteurLanceur, servoMoteurLanceur, joystick);
     79c:	8f 81       	ldd	r24, Y+7	; 0x07
     79e:	1f 92       	push	r1
     7a0:	8f 93       	push	r24
     7a2:	8e 81       	ldd	r24, Y+6	; 0x06
     7a4:	1f 92       	push	r1
     7a6:	8f 93       	push	r24
     7a8:	8d 81       	ldd	r24, Y+5	; 0x05
     7aa:	1f 92       	push	r1
     7ac:	8f 93       	push	r24
     7ae:	8c 81       	ldd	r24, Y+4	; 0x04
     7b0:	1f 92       	push	r1
     7b2:	8f 93       	push	r24
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	1f 92       	push	r1
     7b8:	8f 93       	push	r24
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	1f 92       	push	r1
     7be:	8f 93       	push	r24
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	1f 92       	push	r1
     7c4:	8f 93       	push	r24
     7c6:	1f 93       	push	r17
     7c8:	0f 93       	push	r16
     7ca:	8e 01       	movw	r16, r28
     7cc:	00 5d       	subi	r16, 0xD0	; 208
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	1f 93       	push	r17
     7d2:	0f 93       	push	r16
     7d4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <sprintf>
				lcd_set_cursor_position(0,0);
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_set_cursor_position>

				lcd_write_string(str);
     7ea:	c8 01       	movw	r24, r16
     7ec:	0e 94 53 03 	call	0x6a6	; 0x6a6 <lcd_write_string>
						
				//Mode rotation (le véhicule tourne sur lui-même par la gauche ou par la droite)
				if(mode == 1){
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	51 f4       	brne	.+20     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
					driverRotation(x,z);	
     7f6:	6b 81       	ldd	r22, Y+3	; 0x03
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	0e 94 cb 05 	call	0xb96	; 0xb96 <driverRotation>
					driverLanceur(moteurLanceur,servoMoteurLanceur,y);	
     7fe:	4a 81       	ldd	r20, Y+2	; 0x02
     800:	6e 81       	ldd	r22, Y+6	; 0x06
     802:	8d 81       	ldd	r24, Y+5	; 0x05
     804:	0e 94 ae 07 	call	0xf5c	; 0xf5c <driverLanceur>
     808:	10 c0       	rjmp	.+32     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				}					
				//Mode déplacement (le véhicule peut avancer, reculer, tourner)
				else if(mode == 0){
     80a:	81 11       	cpse	r24, r1
     80c:	0b c0       	rjmp	.+22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
					driverDeplacement(joystick, x, z);	
     80e:	4b 81       	ldd	r20, Y+3	; 0x03
     810:	69 81       	ldd	r22, Y+1	; 0x01
     812:	8f 81       	ldd	r24, Y+7	; 0x07
     814:	0e 94 ed 06 	call	0xdda	; 0xdda <driverDeplacement>
					driverLanceur(moteurLanceur,servoMoteurLanceur,y);
     818:	4a 81       	ldd	r20, Y+2	; 0x02
     81a:	6e 81       	ldd	r22, Y+6	; 0x06
     81c:	8d 81       	ldd	r24, Y+5	; 0x05
     81e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <driverLanceur>
     822:	03 c0       	rjmp	.+6      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
					}
				//Si problème alors le véhicule arrête de bouger
				else {
					setPuissanceMoteurRoue(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
				}
		}	
	display_heartbeat();		
     82a:	0e 94 06 07 	call	0xe0c	; 0xe0c <display_heartbeat>
	}
     82e:	82 cf       	rjmp	.-252    	; 0x734 <main+0x68>

00000830 <disable_UDRE_interupt>:


/*** uart_clean_rx_buffer ***/
void uart_clean_rx_buffer(uart_e port){

	fifo_clean(rx_fifo_list[port]);
     830:	88 23       	and	r24, r24
     832:	19 f0       	breq	.+6      	; 0x83a <disable_UDRE_interupt+0xa>
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	39 f0       	breq	.+14     	; 0x846 <disable_UDRE_interupt+0x16>
     838:	08 95       	ret
     83a:	e1 ec       	ldi	r30, 0xC1	; 193
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	8f 7d       	andi	r24, 0xDF	; 223
     842:	80 83       	st	Z, r24
     844:	08 95       	ret
     846:	e9 ec       	ldi	r30, 0xC9	; 201
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	8f 7d       	andi	r24, 0xDF	; 223
     84e:	80 83       	st	Z, r24
     850:	08 95       	ret

00000852 <enable_RX_interupt>:
     852:	88 23       	and	r24, r24
     854:	19 f0       	breq	.+6      	; 0x85c <enable_RX_interupt+0xa>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	39 f0       	breq	.+14     	; 0x868 <enable_RX_interupt+0x16>
     85a:	08 95       	ret
     85c:	e1 ec       	ldi	r30, 0xC1	; 193
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	80 68       	ori	r24, 0x80	; 128
     864:	80 83       	st	Z, r24
     866:	08 95       	ret
     868:	e9 ec       	ldi	r30, 0xC9	; 201
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	80 81       	ld	r24, Z
     86e:	80 68       	ori	r24, 0x80	; 128
     870:	80 83       	st	Z, r24
     872:	08 95       	ret

00000874 <disable_RX_interupt>:
     874:	88 23       	and	r24, r24
     876:	19 f0       	breq	.+6      	; 0x87e <disable_RX_interupt+0xa>
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	39 f0       	breq	.+14     	; 0x88a <disable_RX_interupt+0x16>
     87c:	08 95       	ret
     87e:	e1 ec       	ldi	r30, 0xC1	; 193
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 81       	ld	r24, Z
     884:	8f 77       	andi	r24, 0x7F	; 127
     886:	80 83       	st	Z, r24
     888:	08 95       	ret
     88a:	e9 ec       	ldi	r30, 0xC9	; 201
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	80 81       	ld	r24, Z
     890:	8f 77       	andi	r24, 0x7F	; 127
     892:	80 83       	st	Z, r24
     894:	08 95       	ret

00000896 <__vector_21>:
     896:	1f 92       	push	r1
     898:	0f 92       	push	r0
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	0f 92       	push	r0
     89e:	11 24       	eor	r1, r1
     8a0:	2f 93       	push	r18
     8a2:	3f 93       	push	r19
     8a4:	4f 93       	push	r20
     8a6:	5f 93       	push	r21
     8a8:	6f 93       	push	r22
     8aa:	7f 93       	push	r23
     8ac:	8f 93       	push	r24
     8ae:	9f 93       	push	r25
     8b0:	af 93       	push	r26
     8b2:	bf 93       	push	r27
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	82 e5       	ldi	r24, 0x52	; 82
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <fifo_pop>
     8c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     8c4:	82 e5       	ldi	r24, 0x52	; 82
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	0e 94 8c 01 	call	0x318	; 0x318 <fifo_is_empty>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__vector_21+0x40>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 18 04 	call	0x830	; 0x830 <disable_UDRE_interupt>
     8d6:	ff 91       	pop	r31
     8d8:	ef 91       	pop	r30
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	0f 90       	pop	r0
     8f4:	1f 90       	pop	r1
     8f6:	18 95       	reti

000008f8 <__vector_20>:
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
     91a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     91e:	8a e5       	ldi	r24, 0x5A	; 90
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 42 01 	call	0x284	; 0x284 <fifo_push>
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_29>:
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
     96a:	82 e4       	ldi	r24, 0x42	; 66
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 66 01 	call	0x2cc	; 0x2cc <fifo_pop>
     972:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     976:	82 e4       	ldi	r24, 0x42	; 66
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 8c 01 	call	0x318	; 0x318 <fifo_is_empty>
     97e:	88 23       	and	r24, r24
     980:	19 f0       	breq	.+6      	; 0x988 <__vector_29+0x40>
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 18 04 	call	0x830	; 0x830 <disable_UDRE_interupt>
     988:	ff 91       	pop	r31
     98a:	ef 91       	pop	r30
     98c:	bf 91       	pop	r27
     98e:	af 91       	pop	r26
     990:	9f 91       	pop	r25
     992:	8f 91       	pop	r24
     994:	7f 91       	pop	r23
     996:	6f 91       	pop	r22
     998:	5f 91       	pop	r21
     99a:	4f 91       	pop	r20
     99c:	3f 91       	pop	r19
     99e:	2f 91       	pop	r18
     9a0:	0f 90       	pop	r0
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	0f 90       	pop	r0
     9a6:	1f 90       	pop	r1
     9a8:	18 95       	reti

000009aa <__vector_28>:
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	2f 93       	push	r18
     9b6:	3f 93       	push	r19
     9b8:	4f 93       	push	r20
     9ba:	5f 93       	push	r21
     9bc:	6f 93       	push	r22
     9be:	7f 93       	push	r23
     9c0:	8f 93       	push	r24
     9c2:	9f 93       	push	r25
     9c4:	af 93       	push	r26
     9c6:	bf 93       	push	r27
     9c8:	ef 93       	push	r30
     9ca:	ff 93       	push	r31
     9cc:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
     9d0:	8a e4       	ldi	r24, 0x4A	; 74
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 42 01 	call	0x284	; 0x284 <fifo_push>
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <uart_set_baudrate>:
     9fa:	88 23       	and	r24, r24
     9fc:	19 f0       	breq	.+6      	; 0xa04 <uart_set_baudrate+0xa>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	71 f0       	breq	.+28     	; 0xa1e <uart_set_baudrate+0x24>
     a02:	08 95       	ret
     a04:	e6 2f       	mov	r30, r22
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	e8 5d       	subi	r30, 0xD8	; 216
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	80 81       	ld	r24, Z
     a12:	91 81       	ldd	r25, Z+1	; 0x01
     a14:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a18:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     a1c:	08 95       	ret
     a1e:	e6 2f       	mov	r30, r22
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	e8 5d       	subi	r30, 0xD8	; 216
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
     a32:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
     a36:	08 95       	ret

00000a38 <uart_init>:
     a38:	cf 93       	push	r28
     a3a:	c8 2f       	mov	r28, r24
     a3c:	88 23       	and	r24, r24
     a3e:	19 f0       	breq	.+6      	; 0xa46 <uart_init+0xe>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	c1 f0       	breq	.+48     	; 0xa74 <uart_init+0x3c>
     a44:	2d c0       	rjmp	.+90     	; 0xaa0 <uart_init+0x68>
     a46:	86 e0       	ldi	r24, 0x06	; 6
     a48:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     a4c:	88 e9       	ldi	r24, 0x98	; 152
     a4e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     a52:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     a56:	46 e9       	ldi	r20, 0x96	; 150
     a58:	68 e1       	ldi	r22, 0x18	; 24
     a5a:	72 e0       	ldi	r23, 0x02	; 2
     a5c:	8a e5       	ldi	r24, 0x5A	; 90
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 37 01 	call	0x26e	; 0x26e <fifo_init>
     a64:	46 e9       	ldi	r20, 0x96	; 150
     a66:	62 e8       	ldi	r22, 0x82	; 130
     a68:	71 e0       	ldi	r23, 0x01	; 1
     a6a:	82 e5       	ldi	r24, 0x52	; 82
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 37 01 	call	0x26e	; 0x26e <fifo_init>
     a72:	16 c0       	rjmp	.+44     	; 0xaa0 <uart_init+0x68>
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
     a7a:	88 e9       	ldi	r24, 0x98	; 152
     a7c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
     a80:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
     a84:	40 e1       	ldi	r20, 0x10	; 16
     a86:	62 e7       	ldi	r22, 0x72	; 114
     a88:	71 e0       	ldi	r23, 0x01	; 1
     a8a:	8a e4       	ldi	r24, 0x4A	; 74
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 37 01 	call	0x26e	; 0x26e <fifo_init>
     a92:	40 e1       	ldi	r20, 0x10	; 16
     a94:	62 e6       	ldi	r22, 0x62	; 98
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	82 e4       	ldi	r24, 0x42	; 66
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 37 01 	call	0x26e	; 0x26e <fifo_init>
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	8c 2f       	mov	r24, r28
     aa4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <uart_set_baudrate>
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <uart_get_byte>:
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	c8 2f       	mov	r28, r24
     ab2:	0e 94 3a 04 	call	0x874	; 0x874 <disable_RX_interupt>
     ab6:	ec 2f       	mov	r30, r28
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ec 5d       	subi	r30, 0xDC	; 220
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	0e 94 66 01 	call	0x2cc	; 0x2cc <fifo_pop>
     aca:	d8 2f       	mov	r29, r24
     acc:	8c 2f       	mov	r24, r28
     ace:	0e 94 29 04 	call	0x852	; 0x852 <enable_RX_interupt>
     ad2:	8d 2f       	mov	r24, r29
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	08 95       	ret

00000ada <uart_is_rx_buffer_empty>:
}

/*** is_rx_buffer_empty ***/
bool uart_is_rx_buffer_empty(uart_e port){

    return fifo_is_empty(rx_fifo_list[port]);
     ada:	e8 2f       	mov	r30, r24
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ec 5d       	subi	r30, 0xDC	; 220
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	80 81       	ld	r24, Z
     ae8:	91 81       	ldd	r25, Z+1	; 0x01
     aea:	0e 94 8c 01 	call	0x318	; 0x318 <fifo_is_empty>
}
     aee:	08 95       	ret

00000af0 <uart_get_string>:

    return byte;
}


void uart_get_string(uart_e port, char* out_buffer, uint8_t buffer_length){
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	d8 2f       	mov	r29, r24
     b00:	8b 01       	movw	r16, r22
     b02:	d4 2e       	mov	r13, r20

	uint8_t index = 0;
     b04:	c0 e0       	ldi	r28, 0x00	; 0

	while(uart_is_rx_buffer_empty(port) == FALSE){
     b06:	11 c0       	rjmp	.+34     	; 0xb2a <uart_get_string+0x3a>

		out_buffer[index] = uart_get_byte(port);
     b08:	78 01       	movw	r14, r16
     b0a:	ec 0e       	add	r14, r28
     b0c:	f1 1c       	adc	r15, r1
     b0e:	8d 2f       	mov	r24, r29
     b10:	0e 94 56 05 	call	0xaac	; 0xaac <uart_get_byte>
     b14:	f7 01       	movw	r30, r14
     b16:	80 83       	st	Z, r24
		index++;
     b18:	cf 5f       	subi	r28, 0xFF	; 255

		// Si il ne reste de la place que pour le \0
		if(index >= buffer_length - 1){
     b1a:	2c 2f       	mov	r18, r28
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	8d 2d       	mov	r24, r13
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	28 17       	cp	r18, r24
     b26:	39 07       	cpc	r19, r25
     b28:	2c f4       	brge	.+10     	; 0xb34 <uart_get_string+0x44>

void uart_get_string(uart_e port, char* out_buffer, uint8_t buffer_length){

	uint8_t index = 0;

	while(uart_is_rx_buffer_empty(port) == FALSE){
     b2a:	8d 2f       	mov	r24, r29
     b2c:	0e 94 6d 05 	call	0xada	; 0xada <uart_is_rx_buffer_empty>
     b30:	88 23       	and	r24, r24
     b32:	51 f3       	breq	.-44     	; 0xb08 <uart_get_string+0x18>
		}
	}


	// Très temporaire pour déboguer
	if(index == 0){
     b34:	c1 11       	cpse	r28, r1
     b36:	05 c0       	rjmp	.+10     	; 0xb42 <uart_get_string+0x52>

		string_copy(out_buffer, "-vide-");
     b38:	6d e1       	ldi	r22, 0x1D	; 29
     b3a:	71 e0       	ldi	r23, 0x01	; 1
     b3c:	c8 01       	movw	r24, r16
     b3e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <string_copy>
	}

	// On ferme la string
	out_buffer[index] = '\0';
     b42:	f8 01       	movw	r30, r16
     b44:	ec 0f       	add	r30, r28
     b46:	f1 1d       	adc	r31, r1
     b48:	10 82       	st	Z, r1
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	08 95       	ret

00000b5a <string_copy>:
    }

    return length;
}

uint8_t string_copy(char* out_string, const char* in_string){
     b5a:	dc 01       	movw	r26, r24
	
	uint8_t i = 0;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
	
	while(in_string[i] != '\0'){
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <string_copy+0x10>
		
		out_string[i] = in_string[i];
     b60:	fd 01       	movw	r30, r26
     b62:	e2 0f       	add	r30, r18
     b64:	f3 1f       	adc	r31, r19
     b66:	40 83       	st	Z, r20
		i++;
     b68:	8f 5f       	subi	r24, 0xFF	; 255

uint8_t string_copy(char* out_string, const char* in_string){
	
	uint8_t i = 0;
	
	while(in_string[i] != '\0'){
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	fb 01       	movw	r30, r22
     b70:	e2 0f       	add	r30, r18
     b72:	f3 1f       	adc	r31, r19
     b74:	40 81       	ld	r20, Z
     b76:	41 11       	cpse	r20, r1
     b78:	f3 cf       	rjmp	.-26     	; 0xb60 <string_copy+0x6>
		out_string[i] = in_string[i];
		i++;
	}
	
	// Puisque le while juste avant tchoke au \0, il faut le mettre
	out_string[i] = '\0';
     b7a:	fd 01       	movw	r30, r26
     b7c:	e2 0f       	add	r30, r18
     b7e:	f3 1f       	adc	r31, r19
     b80:	10 82       	st	Z, r1
	
	return i;
}
     b82:	08 95       	ret

00000b84 <setPuissanceMoteurRoue>:
/*Set puissance des roues
*
*Parametre uint8_t : valeur puissance desirer
*
*/
void setPuissanceMoteurRoue (uint8_t valeur){
     b84:	cf 93       	push	r28
     b86:	c8 2f       	mov	r28, r24
	pwm0_set_PB3(valeur);
     b88:	0e 94 cb 00 	call	0x196	; 0x196 <pwm0_set_PB3>
	pwm0_set_PB4(valeur);
     b8c:	8c 2f       	mov	r24, r28
     b8e:	0e 94 cd 00 	call	0x19a	; 0x19a <pwm0_set_PB4>
}
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <driverRotation>:
* Parametre : X sens de rotation 
* Parametre : Z Rapiditer de la rotation  
*
*/
void driverRotation (uint8_t x, uint8_t z){
			if (x >= 200){
     b96:	88 3c       	cpi	r24, 0xC8	; 200
     b98:	50 f0       	brcs	.+20     	; 0xbae <driverRotation+0x18>
				DDRB = clear_bits(DDRB, 0b0000110);	// REFACTOR
     b9a:	84 b1       	in	r24, 0x04	; 4
     b9c:	89 7f       	andi	r24, 0xF9	; 249
     b9e:	84 b9       	out	0x04, r24	; 4
				PORTB = set_bit(DDRB, 1);			// REFACTOR
     ba0:	84 b1       	in	r24, 0x04	; 4
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	85 b9       	out	0x05, r24	; 5
				setPuissanceMoteurRoue(z);
     ba6:	86 2f       	mov	r24, r22
     ba8:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
     bac:	08 95       	ret
			}
			else if (x <= 100){
     bae:	85 36       	cpi	r24, 0x65	; 101
     bb0:	50 f4       	brcc	.+20     	; 0xbc6 <driverRotation+0x30>

				DDRB = clear_bits(DDRB, 0b0000110); // REFACTOR
     bb2:	84 b1       	in	r24, 0x04	; 4
     bb4:	89 7f       	andi	r24, 0xF9	; 249
     bb6:	84 b9       	out	0x04, r24	; 4
				PORTB = set_bit(DDRB, 2);			// REFACTOR
     bb8:	84 b1       	in	r24, 0x04	; 4
     bba:	84 60       	ori	r24, 0x04	; 4
     bbc:	85 b9       	out	0x05, r24	; 5
				setPuissanceMoteurRoue(z);
     bbe:	86 2f       	mov	r24, r22
     bc0:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
     bc4:	08 95       	ret
			}
			else{
				setPuissanceMoteurRoue(0);	
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
     bcc:	08 95       	ret

00000bce <setPuissance_gauche>:
*
*Parametre uint8_t : valeur joystick X
*Parametre uint8_t : valeur joystick Z
*
*/
void setPuissance_gauche (uint8_t x, uint8_t z){
     bce:	7f 92       	push	r7
     bd0:	8f 92       	push	r8
     bd2:	9f 92       	push	r9
     bd4:	af 92       	push	r10
     bd6:	bf 92       	push	r11
     bd8:	cf 92       	push	r12
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	a8 97       	sbiw	r28, 0x28	; 40
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	f6 2e       	mov	r15, r22
	double rapport = 1;
	double vitesse = z;

	char str1 [40] = {'\0'};
     bfa:	8e 01       	movw	r16, r28
     bfc:	0f 5f       	subi	r16, 0xFF	; 255
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	98 e2       	ldi	r25, 0x28	; 40
     c02:	f8 01       	movw	r30, r16
     c04:	11 92       	st	Z+, r1
     c06:	9a 95       	dec	r25
     c08:	e9 f7       	brne	.-6      	; 0xc04 <setPuissance_gauche+0x36>

	rapport = 0.0056*(double)x + 0.2;
     c0a:	68 2f       	mov	r22, r24
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__floatunsisf>
     c16:	24 e3       	ldi	r18, 0x34	; 52
     c18:	30 e8       	ldi	r19, 0x80	; 128
     c1a:	47 eb       	ldi	r20, 0xB7	; 183
     c1c:	5b e3       	ldi	r21, 0x3B	; 59
     c1e:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsf3>
     c22:	2d ec       	ldi	r18, 0xCD	; 205
     c24:	3c ec       	ldi	r19, 0xCC	; 204
     c26:	4c e4       	ldi	r20, 0x4C	; 76
     c28:	5e e3       	ldi	r21, 0x3E	; 62
     c2a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     c2e:	4b 01       	movw	r8, r22
     c30:	5c 01       	movw	r10, r24
	vitesse = (int)(rapport * z);
     c32:	6f 2d       	mov	r22, r15
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__floatsisf>
     c3e:	a5 01       	movw	r20, r10
     c40:	94 01       	movw	r18, r8
     c42:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsf3>
     c46:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fixsfsi>
     c4a:	4b 01       	movw	r8, r22
     c4c:	5c 01       	movw	r10, r24
     c4e:	07 2e       	mov	r0, r23
     c50:	00 0c       	add	r0, r0
     c52:	88 0b       	sbc	r24, r24
     c54:	99 0b       	sbc	r25, r25
     c56:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__floatsisf>
     c5a:	e6 2e       	mov	r14, r22
     c5c:	d7 2e       	mov	r13, r23
     c5e:	c8 2e       	mov	r12, r24
     c60:	79 2e       	mov	r7, r25
	pwm0_set_PB3(vitesse);
     c62:	88 2d       	mov	r24, r8
     c64:	0e 94 cb 00 	call	0x196	; 0x196 <pwm0_set_PB3>
	pwm0_set_PB4(z);
     c68:	8f 2d       	mov	r24, r15
     c6a:	0e 94 cd 00 	call	0x19a	; 0x19a <pwm0_set_PB4>
				
	sprintf(str1, "%03f", vitesse);
     c6e:	7f 92       	push	r7
     c70:	cf 92       	push	r12
     c72:	df 92       	push	r13
     c74:	ef 92       	push	r14
     c76:	8a e3       	ldi	r24, 0x3A	; 58
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	9f 93       	push	r25
     c7c:	8f 93       	push	r24
     c7e:	1f 93       	push	r17
     c80:	0f 93       	push	r16
     c82:	0e 94 62 09 	call	0x12c4	; 0x12c4 <sprintf>
	lcd_set_cursor_position(10,1);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	8a e0       	ldi	r24, 0x0A	; 10
     c8a:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_set_cursor_position>
	lcd_write_string(str1);
     c8e:	c8 01       	movw	r24, r16
     c90:	0e 94 53 03 	call	0x6a6	; 0x6a6 <lcd_write_string>
}
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	a8 96       	adiw	r28, 0x28	; 40
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	08 95       	ret

00000cc6 <setPuissance_droite>:
*
*Parametre uint8_t : valeur joystick X
*Parametre uint8_t : valeur joystick Z
*
*/
void setPuissance_droite (uint8_t x, uint8_t z){
     cc6:	7f 92       	push	r7
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	a8 97       	sbiw	r28, 0x28	; 40
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	b6 2e       	mov	r11, r22
	double rapport = 1;
	double vitesse = z;
	
	char str1 [40] = {'\0'};
     cf2:	8e 01       	movw	r16, r28
     cf4:	0f 5f       	subi	r16, 0xFF	; 255
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	98 e2       	ldi	r25, 0x28	; 40
     cfa:	f8 01       	movw	r30, r16
     cfc:	11 92       	st	Z+, r1
     cfe:	9a 95       	dec	r25
     d00:	e9 f7       	brne	.-6      	; 0xcfc <setPuissance_droite+0x36>

	rapport = -0.0056*(double)x + 1.728;
     d02:	68 2f       	mov	r22, r24
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__floatunsisf>
     d0e:	24 e3       	ldi	r18, 0x34	; 52
     d10:	30 e8       	ldi	r19, 0x80	; 128
     d12:	47 eb       	ldi	r20, 0xB7	; 183
     d14:	5b eb       	ldi	r21, 0xBB	; 187
     d16:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsf3>
     d1a:	2b e1       	ldi	r18, 0x1B	; 27
     d1c:	3f e2       	ldi	r19, 0x2F	; 47
     d1e:	4d ed       	ldi	r20, 0xDD	; 221
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__addsf3>
     d26:	6b 01       	movw	r12, r22
     d28:	7c 01       	movw	r14, r24
	vitesse =  (int)(rapport * z);
     d2a:	6b 2d       	mov	r22, r11
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__floatsisf>
     d36:	a7 01       	movw	r20, r14
     d38:	96 01       	movw	r18, r12
     d3a:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulsf3>
     d3e:	0e 94 2b 08 	call	0x1056	; 0x1056 <__fixsfsi>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
     d46:	07 2e       	mov	r0, r23
     d48:	00 0c       	add	r0, r0
     d4a:	88 0b       	sbc	r24, r24
     d4c:	99 0b       	sbc	r25, r25
     d4e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__floatsisf>
     d52:	a6 2e       	mov	r10, r22
     d54:	97 2e       	mov	r9, r23
     d56:	88 2e       	mov	r8, r24
     d58:	79 2e       	mov	r7, r25
	pwm0_set_PB3(z);
     d5a:	8b 2d       	mov	r24, r11
     d5c:	0e 94 cb 00 	call	0x196	; 0x196 <pwm0_set_PB3>
	pwm0_set_PB4(vitesse);
     d60:	8c 2d       	mov	r24, r12
     d62:	0e 94 cd 00 	call	0x19a	; 0x19a <pwm0_set_PB4>
	
	sprintf(str1, "%03f", vitesse);
     d66:	7f 92       	push	r7
     d68:	8f 92       	push	r8
     d6a:	9f 92       	push	r9
     d6c:	af 92       	push	r10
     d6e:	8a e3       	ldi	r24, 0x3A	; 58
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	9f 93       	push	r25
     d74:	8f 93       	push	r24
     d76:	1f 93       	push	r17
     d78:	0f 93       	push	r16
     d7a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <sprintf>
	lcd_set_cursor_position(10,1);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_set_cursor_position>
	lcd_write_string(str1);
     d86:	c8 01       	movw	r24, r16
     d88:	0e 94 53 03 	call	0x6a6	; 0x6a6 <lcd_write_string>
}
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	a8 96       	adiw	r28, 0x28	; 40
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	9f 90       	pop	r9
     db8:	8f 90       	pop	r8
     dba:	7f 90       	pop	r7
     dbc:	08 95       	ret

00000dbe <setPuissance_tourner>:
*Parametre uint8_t : valeur joystick X
*Parametre uint8_t : valeur joystick Z
*
*/
void setPuissance_tourner (uint8_t x, uint8_t z){
	if (x <= 125){
     dbe:	8e 37       	cpi	r24, 0x7E	; 126
     dc0:	18 f4       	brcc	.+6      	; 0xdc8 <setPuissance_tourner+0xa>
		setPuissance_gauche (x,z);
     dc2:	0e 94 e7 05 	call	0xbce	; 0xbce <setPuissance_gauche>
     dc6:	08 95       	ret
	}
	else if (x >= 130){
     dc8:	82 38       	cpi	r24, 0x82	; 130
     dca:	18 f0       	brcs	.+6      	; 0xdd2 <setPuissance_tourner+0x14>
		setPuissance_droite (x,z);
     dcc:	0e 94 63 06 	call	0xcc6	; 0xcc6 <setPuissance_droite>
     dd0:	08 95       	ret
	}
	else {
		setPuissanceMoteurRoue(z);
     dd2:	86 2f       	mov	r24, r22
     dd4:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
     dd8:	08 95       	ret

00000dda <driverDeplacement>:
*Parametre uint8_t : bouton joystick
*Parametre uint8_t : valeur joystick X
*Parametre uint8_t : valeur joystick Y
*
*/
void driverDeplacement(uint8_t joystick, uint8_t x, uint8_t z){
     dda:	96 2f       	mov	r25, r22
		if (joystick == 1){
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	41 f4       	brne	.+16     	; 0xdf0 <driverDeplacement+0x16>
			PORTB = clear_bits(DDRB, 0b0000110);	// REFACTOR
     de0:	84 b1       	in	r24, 0x04	; 4
     de2:	89 7f       	andi	r24, 0xF9	; 249
     de4:	85 b9       	out	0x05, r24	; 5
			setPuissance_tourner (x,z);
     de6:	64 2f       	mov	r22, r20
     de8:	89 2f       	mov	r24, r25
     dea:	0e 94 df 06 	call	0xdbe	; 0xdbe <setPuissance_tourner>
     dee:	08 95       	ret
		}
		else if(joystick == 0){
     df0:	81 11       	cpse	r24, r1
     df2:	08 c0       	rjmp	.+16     	; 0xe04 <driverDeplacement+0x2a>
			PORTB = set_bits(DDRB, 0b0000110);		// REFACTOR
     df4:	84 b1       	in	r24, 0x04	; 4
     df6:	86 60       	ori	r24, 0x06	; 6
     df8:	85 b9       	out	0x05, r24	; 5
			setPuissance_tourner (x,z);
     dfa:	64 2f       	mov	r22, r20
     dfc:	89 2f       	mov	r24, r25
     dfe:	0e 94 df 06 	call	0xdbe	; 0xdbe <setPuissance_tourner>
     e02:	08 95       	ret
		}			
		else{
			setPuissanceMoteurRoue(0);
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 c2 05 	call	0xb84	; 0xb84 <setPuissanceMoteurRoue>
     e0a:	08 95       	ret

00000e0c <display_heartbeat>:


//Test 
	void display_heartbeat(void) {
		static uint8_t heartbeat = 'Z';
		heartbeat = (heartbeat == 'Z') ? ('A') : (heartbeat + 1);
     e0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e10:	8a 35       	cpi	r24, 0x5A	; 90
     e12:	11 f0       	breq	.+4      	; 0xe18 <display_heartbeat+0xc>
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	01 c0       	rjmp	.+2      	; 0xe1a <display_heartbeat+0xe>
     e18:	81 e4       	ldi	r24, 0x41	; 65
     e1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		lcd_set_cursor_position(15, 1);	
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	8f e0       	ldi	r24, 0x0F	; 15
     e22:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_set_cursor_position>
		lcd_write_char(heartbeat);
     e26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e2a:	0e 94 22 03 	call	0x644	; 0x644 <lcd_write_char>
     e2e:	08 95       	ret

00000e30 <driverMoteurElevation>:
	* y = 255 fait elever la platform et Y = 0 fait descendre la platforme.
	*
	* Parametre uint8_t y   : Joystick y cicuit_mannette
	*/

	void driverMoteurElevation(uint8_t y){
     e30:	cf 93       	push	r28
     e32:	c8 2f       	mov	r28, r24
		lcd_set_cursor_position(8, 1);		
     e34:	61 e0       	ldi	r22, 0x01	; 1
     e36:	88 e0       	ldi	r24, 0x08	; 8
     e38:	0e 94 77 02 	call	0x4ee	; 0x4ee <lcd_set_cursor_position>
		if(y == PUISSANCE_MAX){ 		
     e3c:	cf 3f       	cpi	r28, 0xFF	; 255
     e3e:	39 f4       	brne	.+14     	; 0xe4e <driverMoteurElevation+0x1e>
			PORTB = clear_bit(PORTB, 0);
     e40:	85 b1       	in	r24, 0x05	; 5
     e42:	8e 7f       	andi	r24, 0xFE	; 254
     e44:	85 b9       	out	0x05, r24	; 5
			pwm2_set_PD6(PUISSANCE_MAX);		
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	0e 94 34 01 	call	0x268	; 0x268 <pwm2_set_PD6>
     e4c:	0c c0       	rjmp	.+24     	; 0xe66 <driverMoteurElevation+0x36>
		}
		else if ( y ==0){		
     e4e:	c1 11       	cpse	r28, r1
     e50:	07 c0       	rjmp	.+14     	; 0xe60 <driverMoteurElevation+0x30>
			PORTB = set_bit(PORTB, 0);
     e52:	85 b1       	in	r24, 0x05	; 5
     e54:	81 60       	ori	r24, 0x01	; 1
     e56:	85 b9       	out	0x05, r24	; 5
			pwm2_set_PD6(PUISSANCE_MAX);	
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	0e 94 34 01 	call	0x268	; 0x268 <pwm2_set_PD6>
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <driverMoteurElevation+0x36>
		}
		else {		
			pwm2_set_PD6(0);
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	0e 94 34 01 	call	0x268	; 0x268 <pwm2_set_PD6>
		}
	}
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <driverServoMoteur>:
	* init servo : 2300 
    * init servo : 
	*/
	
	void driverServoMoteur(uint8_t bouton){
	if (bouton && clock1 >= DELAIS_TIRS && memoire == 0){
     e6a:	88 23       	and	r24, r24
     e6c:	71 f0       	breq	.+28     	; 0xe8a <driverServoMoteur+0x20>
     e6e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <clock1>
     e72:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <clock1+0x1>
     e76:	cc 97       	sbiw	r24, 0x3c	; 60
     e78:	40 f0       	brcs	.+16     	; 0xe8a <driverServoMoteur+0x20>
     e7a:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <memoire>
     e7e:	81 11       	cpse	r24, r1
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <driverServoMoteur+0x20>
		memoire = 1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <memoire>
     e88:	08 95       	ret
	}
	else if (clock1 >= 60 && memoire == 1 && clock3 < DELAIS_SERVO_MOTEUR){
     e8a:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <clock1>
     e8e:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <clock1+0x1>
     e92:	cc 97       	sbiw	r24, 0x3c	; 60
     e94:	c0 f0       	brcs	.+48     	; 0xec6 <driverServoMoteur+0x5c>
     e96:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <memoire>
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	a1 f4       	brne	.+40     	; 0xec6 <driverServoMoteur+0x5c>
     e9e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <clock3>
     ea2:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <clock3+0x1>
     ea6:	0a 97       	sbiw	r24, 0x0a	; 10
     ea8:	70 f4       	brcc	.+28     	; 0xec6 <driverServoMoteur+0x5c>
		pwm1_set_PD5(900);	
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	0e 94 04 01 	call	0x208	; 0x208 <pwm1_set_PD5>
		clock3++;
     eb2:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <clock3>
     eb6:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <clock3+0x1>
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <clock3+0x1>
     ec0:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <clock3>
     ec4:	08 95       	ret
	} 
	else if(clock3 >= DELAIS_SERVO_MOTEUR){
     ec6:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <clock3>
     eca:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <clock3+0x1>
     ece:	0a 97       	sbiw	r24, 0x0a	; 10
     ed0:	78 f0       	brcs	.+30     	; 0xef0 <driverServoMoteur+0x86>
		clock1 = RESET_CLOCK;
     ed2:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <clock1+0x1>
     ed6:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <clock1>
		clock3 = RESET_CLOCK;
     eda:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <clock3+0x1>
     ede:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <clock3>
		memoire = 0;
     ee2:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <memoire>
		pwm1_set_PD5(2300);	
     ee6:	8c ef       	ldi	r24, 0xFC	; 252
     ee8:	98 e0       	ldi	r25, 0x08	; 8
     eea:	0e 94 04 01 	call	0x208	; 0x208 <pwm1_set_PD5>
     eee:	08 95       	ret
	}
	else
		pwm1_set_PD5(2300);	
     ef0:	8c ef       	ldi	r24, 0xFC	; 252
     ef2:	98 e0       	ldi	r25, 0x08	; 8
     ef4:	0e 94 04 01 	call	0x208	; 0x208 <pwm1_set_PD5>
     ef8:	08 95       	ret

00000efa <driverMoteurRoueInertie>:
	*
	* Parametre : Bonton switch 2
	*
	*/
	void driverMoteurRoueInertie(uint8_t bouton){
		if (bouton){
     efa:	88 23       	and	r24, r24
     efc:	19 f1       	breq	.+70     	; 0xf44 <driverMoteurRoueInertie+0x4a>
			if(clock2 < DELAIS_DEPART_ROUE_INERTIE){
     efe:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <clock2>
     f02:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <clock2+0x1>
     f06:	8e 31       	cpi	r24, 0x1E	; 30
     f08:	91 05       	cpc	r25, r1
     f0a:	68 f4       	brcc	.+26     	; 0xf26 <driverMoteurRoueInertie+0x2c>
			pwm2_set_PD7(PUISSANCE_MAX);
     f0c:	8f ef       	ldi	r24, 0xFF	; 255
     f0e:	0e 94 31 01 	call	0x262	; 0x262 <pwm2_set_PD7>
			clock2++;
     f12:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <clock2>
     f16:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <clock2+0x1>
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <clock2+0x1>
     f20:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <clock2>
     f24:	08 95       	ret
			}
			else if(clock2 >= DELAIS_DEPART_ROUE_INERTIE){
     f26:	4e 97       	sbiw	r24, 0x1e	; 30
     f28:	c0 f0       	brcs	.+48     	; 0xf5a <driverMoteurRoueInertie+0x60>
			pwm2_set_PD7(PUISSANCE_MOTEUR_ROUE_INERTIE);
     f2a:	80 ea       	ldi	r24, 0xA0	; 160
     f2c:	0e 94 31 01 	call	0x262	; 0x262 <pwm2_set_PD7>
			clock1++;
     f30:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <clock1>
     f34:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <clock1+0x1>
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <clock1+0x1>
     f3e:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <clock1>
     f42:	08 95       	ret
			}
		}
		else {
			pwm2_set_PD7(0);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	0e 94 31 01 	call	0x262	; 0x262 <pwm2_set_PD7>
			clock1 = RESET_CLOCK;
     f4a:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <clock1+0x1>
     f4e:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <clock1>
			clock2 = RESET_CLOCK;	
     f52:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <clock2+0x1>
     f56:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <clock2>
     f5a:	08 95       	ret

00000f5c <driverLanceur>:
	*Parametre uint8_t sw2 : Bouton sw2 circuit_mannette
	*Parametre uint8_t sw3 : Bouton sw3 circuit_mannette
	*Parametre uint8_t y   : Joystick y cicuit_mannette
	*
	*/
	void driverLanceur(uint8_t sw2,uint8_t sw3, uint8_t y){
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	c8 2f       	mov	r28, r24
     f62:	d6 2f       	mov	r29, r22
     f64:	84 2f       	mov	r24, r20

		driverMoteurElevation(y);
     f66:	0e 94 18 07 	call	0xe30	; 0xe30 <driverMoteurElevation>
		driverServoMoteur(sw3);
     f6a:	8d 2f       	mov	r24, r29
     f6c:	0e 94 35 07 	call	0xe6a	; 0xe6a <driverServoMoteur>
		driverMoteurRoueInertie(sw2);
     f70:	8c 2f       	mov	r24, r28
     f72:	0e 94 7d 07 	call	0xefa	; 0xefa <driverMoteurRoueInertie>
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <__subsf3>:
     f7c:	50 58       	subi	r21, 0x80	; 128

00000f7e <__addsf3>:
     f7e:	bb 27       	eor	r27, r27
     f80:	aa 27       	eor	r26, r26
     f82:	0e 94 d6 07 	call	0xfac	; 0xfac <__addsf3x>
     f86:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__fp_round>
     f8a:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_pscA>
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__addsf3+0x20>
     f90:	0e 94 ae 08 	call	0x115c	; 0x115c <__fp_pscB>
     f94:	20 f0       	brcs	.+8      	; 0xf9e <__addsf3+0x20>
     f96:	39 f4       	brne	.+14     	; 0xfa6 <__addsf3+0x28>
     f98:	9f 3f       	cpi	r25, 0xFF	; 255
     f9a:	19 f4       	brne	.+6      	; 0xfa2 <__addsf3+0x24>
     f9c:	26 f4       	brtc	.+8      	; 0xfa6 <__addsf3+0x28>
     f9e:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_nan>
     fa2:	0e f4       	brtc	.+2      	; 0xfa6 <__addsf3+0x28>
     fa4:	e0 95       	com	r30
     fa6:	e7 fb       	bst	r30, 7
     fa8:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_inf>

00000fac <__addsf3x>:
     fac:	e9 2f       	mov	r30, r25
     fae:	0e 94 c6 08 	call	0x118c	; 0x118c <__fp_split3>
     fb2:	58 f3       	brcs	.-42     	; 0xf8a <__addsf3+0xc>
     fb4:	ba 17       	cp	r27, r26
     fb6:	62 07       	cpc	r22, r18
     fb8:	73 07       	cpc	r23, r19
     fba:	84 07       	cpc	r24, r20
     fbc:	95 07       	cpc	r25, r21
     fbe:	20 f0       	brcs	.+8      	; 0xfc8 <__addsf3x+0x1c>
     fc0:	79 f4       	brne	.+30     	; 0xfe0 <__addsf3x+0x34>
     fc2:	a6 f5       	brtc	.+104    	; 0x102c <__addsf3x+0x80>
     fc4:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_zero>
     fc8:	0e f4       	brtc	.+2      	; 0xfcc <__addsf3x+0x20>
     fca:	e0 95       	com	r30
     fcc:	0b 2e       	mov	r0, r27
     fce:	ba 2f       	mov	r27, r26
     fd0:	a0 2d       	mov	r26, r0
     fd2:	0b 01       	movw	r0, r22
     fd4:	b9 01       	movw	r22, r18
     fd6:	90 01       	movw	r18, r0
     fd8:	0c 01       	movw	r0, r24
     fda:	ca 01       	movw	r24, r20
     fdc:	a0 01       	movw	r20, r0
     fde:	11 24       	eor	r1, r1
     fe0:	ff 27       	eor	r31, r31
     fe2:	59 1b       	sub	r21, r25
     fe4:	99 f0       	breq	.+38     	; 0x100c <__addsf3x+0x60>
     fe6:	59 3f       	cpi	r21, 0xF9	; 249
     fe8:	50 f4       	brcc	.+20     	; 0xffe <__addsf3x+0x52>
     fea:	50 3e       	cpi	r21, 0xE0	; 224
     fec:	68 f1       	brcs	.+90     	; 0x1048 <__addsf3x+0x9c>
     fee:	1a 16       	cp	r1, r26
     ff0:	f0 40       	sbci	r31, 0x00	; 0
     ff2:	a2 2f       	mov	r26, r18
     ff4:	23 2f       	mov	r18, r19
     ff6:	34 2f       	mov	r19, r20
     ff8:	44 27       	eor	r20, r20
     ffa:	58 5f       	subi	r21, 0xF8	; 248
     ffc:	f3 cf       	rjmp	.-26     	; 0xfe4 <__addsf3x+0x38>
     ffe:	46 95       	lsr	r20
    1000:	37 95       	ror	r19
    1002:	27 95       	ror	r18
    1004:	a7 95       	ror	r26
    1006:	f0 40       	sbci	r31, 0x00	; 0
    1008:	53 95       	inc	r21
    100a:	c9 f7       	brne	.-14     	; 0xffe <__addsf3x+0x52>
    100c:	7e f4       	brtc	.+30     	; 0x102c <__addsf3x+0x80>
    100e:	1f 16       	cp	r1, r31
    1010:	ba 0b       	sbc	r27, r26
    1012:	62 0b       	sbc	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	ba f0       	brmi	.+46     	; 0x1048 <__addsf3x+0x9c>
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	a1 f0       	breq	.+40     	; 0x1046 <__addsf3x+0x9a>
    101e:	ff 0f       	add	r31, r31
    1020:	bb 1f       	adc	r27, r27
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	c2 f7       	brpl	.-16     	; 0x101a <__addsf3x+0x6e>
    102a:	0e c0       	rjmp	.+28     	; 0x1048 <__addsf3x+0x9c>
    102c:	ba 0f       	add	r27, r26
    102e:	62 1f       	adc	r22, r18
    1030:	73 1f       	adc	r23, r19
    1032:	84 1f       	adc	r24, r20
    1034:	48 f4       	brcc	.+18     	; 0x1048 <__addsf3x+0x9c>
    1036:	87 95       	ror	r24
    1038:	77 95       	ror	r23
    103a:	67 95       	ror	r22
    103c:	b7 95       	ror	r27
    103e:	f7 95       	ror	r31
    1040:	9e 3f       	cpi	r25, 0xFE	; 254
    1042:	08 f0       	brcs	.+2      	; 0x1046 <__addsf3x+0x9a>
    1044:	b0 cf       	rjmp	.-160    	; 0xfa6 <__addsf3+0x28>
    1046:	93 95       	inc	r25
    1048:	88 0f       	add	r24, r24
    104a:	08 f0       	brcs	.+2      	; 0x104e <__addsf3x+0xa2>
    104c:	99 27       	eor	r25, r25
    104e:	ee 0f       	add	r30, r30
    1050:	97 95       	ror	r25
    1052:	87 95       	ror	r24
    1054:	08 95       	ret

00001056 <__fixsfsi>:
    1056:	0e 94 32 08 	call	0x1064	; 0x1064 <__fixunssfsi>
    105a:	68 94       	set
    105c:	b1 11       	cpse	r27, r1
    105e:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_szero>
    1062:	08 95       	ret

00001064 <__fixunssfsi>:
    1064:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_splitA>
    1068:	88 f0       	brcs	.+34     	; 0x108c <__fixunssfsi+0x28>
    106a:	9f 57       	subi	r25, 0x7F	; 127
    106c:	98 f0       	brcs	.+38     	; 0x1094 <__fixunssfsi+0x30>
    106e:	b9 2f       	mov	r27, r25
    1070:	99 27       	eor	r25, r25
    1072:	b7 51       	subi	r27, 0x17	; 23
    1074:	b0 f0       	brcs	.+44     	; 0x10a2 <__fixunssfsi+0x3e>
    1076:	e1 f0       	breq	.+56     	; 0x10b0 <__fixunssfsi+0x4c>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	88 1f       	adc	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	1a f0       	brmi	.+6      	; 0x1088 <__fixunssfsi+0x24>
    1082:	ba 95       	dec	r27
    1084:	c9 f7       	brne	.-14     	; 0x1078 <__fixunssfsi+0x14>
    1086:	14 c0       	rjmp	.+40     	; 0x10b0 <__fixunssfsi+0x4c>
    1088:	b1 30       	cpi	r27, 0x01	; 1
    108a:	91 f0       	breq	.+36     	; 0x10b0 <__fixunssfsi+0x4c>
    108c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__fp_zero>
    1090:	b1 e0       	ldi	r27, 0x01	; 1
    1092:	08 95       	ret
    1094:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_zero>
    1098:	67 2f       	mov	r22, r23
    109a:	78 2f       	mov	r23, r24
    109c:	88 27       	eor	r24, r24
    109e:	b8 5f       	subi	r27, 0xF8	; 248
    10a0:	39 f0       	breq	.+14     	; 0x10b0 <__fixunssfsi+0x4c>
    10a2:	b9 3f       	cpi	r27, 0xF9	; 249
    10a4:	cc f3       	brlt	.-14     	; 0x1098 <__fixunssfsi+0x34>
    10a6:	86 95       	lsr	r24
    10a8:	77 95       	ror	r23
    10aa:	67 95       	ror	r22
    10ac:	b3 95       	inc	r27
    10ae:	d9 f7       	brne	.-10     	; 0x10a6 <__fixunssfsi+0x42>
    10b0:	3e f4       	brtc	.+14     	; 0x10c0 <__fixunssfsi+0x5c>
    10b2:	90 95       	com	r25
    10b4:	80 95       	com	r24
    10b6:	70 95       	com	r23
    10b8:	61 95       	neg	r22
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	8f 4f       	sbci	r24, 0xFF	; 255
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	08 95       	ret

000010c2 <__floatunsisf>:
    10c2:	e8 94       	clt
    10c4:	09 c0       	rjmp	.+18     	; 0x10d8 <__floatsisf+0x12>

000010c6 <__floatsisf>:
    10c6:	97 fb       	bst	r25, 7
    10c8:	3e f4       	brtc	.+14     	; 0x10d8 <__floatsisf+0x12>
    10ca:	90 95       	com	r25
    10cc:	80 95       	com	r24
    10ce:	70 95       	com	r23
    10d0:	61 95       	neg	r22
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	8f 4f       	sbci	r24, 0xFF	; 255
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	99 23       	and	r25, r25
    10da:	a9 f0       	breq	.+42     	; 0x1106 <__floatsisf+0x40>
    10dc:	f9 2f       	mov	r31, r25
    10de:	96 e9       	ldi	r25, 0x96	; 150
    10e0:	bb 27       	eor	r27, r27
    10e2:	93 95       	inc	r25
    10e4:	f6 95       	lsr	r31
    10e6:	87 95       	ror	r24
    10e8:	77 95       	ror	r23
    10ea:	67 95       	ror	r22
    10ec:	b7 95       	ror	r27
    10ee:	f1 11       	cpse	r31, r1
    10f0:	f8 cf       	rjmp	.-16     	; 0x10e2 <__floatsisf+0x1c>
    10f2:	fa f4       	brpl	.+62     	; 0x1132 <__floatsisf+0x6c>
    10f4:	bb 0f       	add	r27, r27
    10f6:	11 f4       	brne	.+4      	; 0x10fc <__floatsisf+0x36>
    10f8:	60 ff       	sbrs	r22, 0
    10fa:	1b c0       	rjmp	.+54     	; 0x1132 <__floatsisf+0x6c>
    10fc:	6f 5f       	subi	r22, 0xFF	; 255
    10fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1100:	8f 4f       	sbci	r24, 0xFF	; 255
    1102:	9f 4f       	sbci	r25, 0xFF	; 255
    1104:	16 c0       	rjmp	.+44     	; 0x1132 <__floatsisf+0x6c>
    1106:	88 23       	and	r24, r24
    1108:	11 f0       	breq	.+4      	; 0x110e <__floatsisf+0x48>
    110a:	96 e9       	ldi	r25, 0x96	; 150
    110c:	11 c0       	rjmp	.+34     	; 0x1130 <__floatsisf+0x6a>
    110e:	77 23       	and	r23, r23
    1110:	21 f0       	breq	.+8      	; 0x111a <__floatsisf+0x54>
    1112:	9e e8       	ldi	r25, 0x8E	; 142
    1114:	87 2f       	mov	r24, r23
    1116:	76 2f       	mov	r23, r22
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <__floatsisf+0x5e>
    111a:	66 23       	and	r22, r22
    111c:	71 f0       	breq	.+28     	; 0x113a <__floatsisf+0x74>
    111e:	96 e8       	ldi	r25, 0x86	; 134
    1120:	86 2f       	mov	r24, r22
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	2a f0       	brmi	.+10     	; 0x1132 <__floatsisf+0x6c>
    1128:	9a 95       	dec	r25
    112a:	66 0f       	add	r22, r22
    112c:	77 1f       	adc	r23, r23
    112e:	88 1f       	adc	r24, r24
    1130:	da f7       	brpl	.-10     	; 0x1128 <__floatsisf+0x62>
    1132:	88 0f       	add	r24, r24
    1134:	96 95       	lsr	r25
    1136:	87 95       	ror	r24
    1138:	97 f9       	bld	r25, 7
    113a:	08 95       	ret

0000113c <__fp_inf>:
    113c:	97 f9       	bld	r25, 7
    113e:	9f 67       	ori	r25, 0x7F	; 127
    1140:	80 e8       	ldi	r24, 0x80	; 128
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	08 95       	ret

00001148 <__fp_nan>:
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	80 ec       	ldi	r24, 0xC0	; 192
    114c:	08 95       	ret

0000114e <__fp_pscA>:
    114e:	00 24       	eor	r0, r0
    1150:	0a 94       	dec	r0
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	18 06       	cpc	r1, r24
    1158:	09 06       	cpc	r0, r25
    115a:	08 95       	ret

0000115c <__fp_pscB>:
    115c:	00 24       	eor	r0, r0
    115e:	0a 94       	dec	r0
    1160:	12 16       	cp	r1, r18
    1162:	13 06       	cpc	r1, r19
    1164:	14 06       	cpc	r1, r20
    1166:	05 06       	cpc	r0, r21
    1168:	08 95       	ret

0000116a <__fp_round>:
    116a:	09 2e       	mov	r0, r25
    116c:	03 94       	inc	r0
    116e:	00 0c       	add	r0, r0
    1170:	11 f4       	brne	.+4      	; 0x1176 <__fp_round+0xc>
    1172:	88 23       	and	r24, r24
    1174:	52 f0       	brmi	.+20     	; 0x118a <__fp_round+0x20>
    1176:	bb 0f       	add	r27, r27
    1178:	40 f4       	brcc	.+16     	; 0x118a <__fp_round+0x20>
    117a:	bf 2b       	or	r27, r31
    117c:	11 f4       	brne	.+4      	; 0x1182 <__fp_round+0x18>
    117e:	60 ff       	sbrs	r22, 0
    1180:	04 c0       	rjmp	.+8      	; 0x118a <__fp_round+0x20>
    1182:	6f 5f       	subi	r22, 0xFF	; 255
    1184:	7f 4f       	sbci	r23, 0xFF	; 255
    1186:	8f 4f       	sbci	r24, 0xFF	; 255
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	08 95       	ret

0000118c <__fp_split3>:
    118c:	57 fd       	sbrc	r21, 7
    118e:	90 58       	subi	r25, 0x80	; 128
    1190:	44 0f       	add	r20, r20
    1192:	55 1f       	adc	r21, r21
    1194:	59 f0       	breq	.+22     	; 0x11ac <__fp_splitA+0x10>
    1196:	5f 3f       	cpi	r21, 0xFF	; 255
    1198:	71 f0       	breq	.+28     	; 0x11b6 <__fp_splitA+0x1a>
    119a:	47 95       	ror	r20

0000119c <__fp_splitA>:
    119c:	88 0f       	add	r24, r24
    119e:	97 fb       	bst	r25, 7
    11a0:	99 1f       	adc	r25, r25
    11a2:	61 f0       	breq	.+24     	; 0x11bc <__fp_splitA+0x20>
    11a4:	9f 3f       	cpi	r25, 0xFF	; 255
    11a6:	79 f0       	breq	.+30     	; 0x11c6 <__fp_splitA+0x2a>
    11a8:	87 95       	ror	r24
    11aa:	08 95       	ret
    11ac:	12 16       	cp	r1, r18
    11ae:	13 06       	cpc	r1, r19
    11b0:	14 06       	cpc	r1, r20
    11b2:	55 1f       	adc	r21, r21
    11b4:	f2 cf       	rjmp	.-28     	; 0x119a <__fp_split3+0xe>
    11b6:	46 95       	lsr	r20
    11b8:	f1 df       	rcall	.-30     	; 0x119c <__fp_splitA>
    11ba:	08 c0       	rjmp	.+16     	; 0x11cc <__fp_splitA+0x30>
    11bc:	16 16       	cp	r1, r22
    11be:	17 06       	cpc	r1, r23
    11c0:	18 06       	cpc	r1, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	f1 cf       	rjmp	.-30     	; 0x11a8 <__fp_splitA+0xc>
    11c6:	86 95       	lsr	r24
    11c8:	71 05       	cpc	r23, r1
    11ca:	61 05       	cpc	r22, r1
    11cc:	08 94       	sec
    11ce:	08 95       	ret

000011d0 <__fp_zero>:
    11d0:	e8 94       	clt

000011d2 <__fp_szero>:
    11d2:	bb 27       	eor	r27, r27
    11d4:	66 27       	eor	r22, r22
    11d6:	77 27       	eor	r23, r23
    11d8:	cb 01       	movw	r24, r22
    11da:	97 f9       	bld	r25, 7
    11dc:	08 95       	ret

000011de <__mulsf3>:
    11de:	0e 94 02 09 	call	0x1204	; 0x1204 <__mulsf3x>
    11e2:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__fp_round>
    11e6:	0e 94 a7 08 	call	0x114e	; 0x114e <__fp_pscA>
    11ea:	38 f0       	brcs	.+14     	; 0x11fa <__mulsf3+0x1c>
    11ec:	0e 94 ae 08 	call	0x115c	; 0x115c <__fp_pscB>
    11f0:	20 f0       	brcs	.+8      	; 0x11fa <__mulsf3+0x1c>
    11f2:	95 23       	and	r25, r21
    11f4:	11 f0       	breq	.+4      	; 0x11fa <__mulsf3+0x1c>
    11f6:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_inf>
    11fa:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_nan>
    11fe:	11 24       	eor	r1, r1
    1200:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_szero>

00001204 <__mulsf3x>:
    1204:	0e 94 c6 08 	call	0x118c	; 0x118c <__fp_split3>
    1208:	70 f3       	brcs	.-36     	; 0x11e6 <__mulsf3+0x8>

0000120a <__mulsf3_pse>:
    120a:	95 9f       	mul	r25, r21
    120c:	c1 f3       	breq	.-16     	; 0x11fe <__mulsf3+0x20>
    120e:	95 0f       	add	r25, r21
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	55 1f       	adc	r21, r21
    1214:	62 9f       	mul	r22, r18
    1216:	f0 01       	movw	r30, r0
    1218:	72 9f       	mul	r23, r18
    121a:	bb 27       	eor	r27, r27
    121c:	f0 0d       	add	r31, r0
    121e:	b1 1d       	adc	r27, r1
    1220:	63 9f       	mul	r22, r19
    1222:	aa 27       	eor	r26, r26
    1224:	f0 0d       	add	r31, r0
    1226:	b1 1d       	adc	r27, r1
    1228:	aa 1f       	adc	r26, r26
    122a:	64 9f       	mul	r22, r20
    122c:	66 27       	eor	r22, r22
    122e:	b0 0d       	add	r27, r0
    1230:	a1 1d       	adc	r26, r1
    1232:	66 1f       	adc	r22, r22
    1234:	82 9f       	mul	r24, r18
    1236:	22 27       	eor	r18, r18
    1238:	b0 0d       	add	r27, r0
    123a:	a1 1d       	adc	r26, r1
    123c:	62 1f       	adc	r22, r18
    123e:	73 9f       	mul	r23, r19
    1240:	b0 0d       	add	r27, r0
    1242:	a1 1d       	adc	r26, r1
    1244:	62 1f       	adc	r22, r18
    1246:	83 9f       	mul	r24, r19
    1248:	a0 0d       	add	r26, r0
    124a:	61 1d       	adc	r22, r1
    124c:	22 1f       	adc	r18, r18
    124e:	74 9f       	mul	r23, r20
    1250:	33 27       	eor	r19, r19
    1252:	a0 0d       	add	r26, r0
    1254:	61 1d       	adc	r22, r1
    1256:	23 1f       	adc	r18, r19
    1258:	84 9f       	mul	r24, r20
    125a:	60 0d       	add	r22, r0
    125c:	21 1d       	adc	r18, r1
    125e:	82 2f       	mov	r24, r18
    1260:	76 2f       	mov	r23, r22
    1262:	6a 2f       	mov	r22, r26
    1264:	11 24       	eor	r1, r1
    1266:	9f 57       	subi	r25, 0x7F	; 127
    1268:	50 40       	sbci	r21, 0x00	; 0
    126a:	9a f0       	brmi	.+38     	; 0x1292 <__mulsf3_pse+0x88>
    126c:	f1 f0       	breq	.+60     	; 0x12aa <__mulsf3_pse+0xa0>
    126e:	88 23       	and	r24, r24
    1270:	4a f0       	brmi	.+18     	; 0x1284 <__mulsf3_pse+0x7a>
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	bb 1f       	adc	r27, r27
    1278:	66 1f       	adc	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	88 1f       	adc	r24, r24
    127e:	91 50       	subi	r25, 0x01	; 1
    1280:	50 40       	sbci	r21, 0x00	; 0
    1282:	a9 f7       	brne	.-22     	; 0x126e <__mulsf3_pse+0x64>
    1284:	9e 3f       	cpi	r25, 0xFE	; 254
    1286:	51 05       	cpc	r21, r1
    1288:	80 f0       	brcs	.+32     	; 0x12aa <__mulsf3_pse+0xa0>
    128a:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__fp_inf>
    128e:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__fp_szero>
    1292:	5f 3f       	cpi	r21, 0xFF	; 255
    1294:	e4 f3       	brlt	.-8      	; 0x128e <__mulsf3_pse+0x84>
    1296:	98 3e       	cpi	r25, 0xE8	; 232
    1298:	d4 f3       	brlt	.-12     	; 0x128e <__mulsf3_pse+0x84>
    129a:	86 95       	lsr	r24
    129c:	77 95       	ror	r23
    129e:	67 95       	ror	r22
    12a0:	b7 95       	ror	r27
    12a2:	f7 95       	ror	r31
    12a4:	e7 95       	ror	r30
    12a6:	9f 5f       	subi	r25, 0xFF	; 255
    12a8:	c1 f7       	brne	.-16     	; 0x129a <__mulsf3_pse+0x90>
    12aa:	fe 2b       	or	r31, r30
    12ac:	88 0f       	add	r24, r24
    12ae:	91 1d       	adc	r25, r1
    12b0:	96 95       	lsr	r25
    12b2:	87 95       	ror	r24
    12b4:	97 f9       	bld	r25, 7
    12b6:	08 95       	ret

000012b8 <__tablejump2__>:
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	05 90       	lpm	r0, Z+
    12be:	f4 91       	lpm	r31, Z
    12c0:	e0 2d       	mov	r30, r0
    12c2:	09 94       	ijmp

000012c4 <sprintf>:
    12c4:	ae e0       	ldi	r26, 0x0E	; 14
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	e8 e6       	ldi	r30, 0x68	; 104
    12ca:	f9 e0       	ldi	r31, 0x09	; 9
    12cc:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__prologue_saves__+0x1c>
    12d0:	0d 89       	ldd	r16, Y+21	; 0x15
    12d2:	1e 89       	ldd	r17, Y+22	; 0x16
    12d4:	86 e0       	ldi	r24, 0x06	; 6
    12d6:	8c 83       	std	Y+4, r24	; 0x04
    12d8:	1a 83       	std	Y+2, r17	; 0x02
    12da:	09 83       	std	Y+1, r16	; 0x01
    12dc:	8f ef       	ldi	r24, 0xFF	; 255
    12de:	9f e7       	ldi	r25, 0x7F	; 127
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
    12e4:	ae 01       	movw	r20, r28
    12e6:	47 5e       	subi	r20, 0xE7	; 231
    12e8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ea:	6f 89       	ldd	r22, Y+23	; 0x17
    12ec:	78 8d       	ldd	r23, Y+24	; 0x18
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	0e 94 9d 09 	call	0x133a	; 0x133a <vfprintf>
    12f6:	ef 81       	ldd	r30, Y+7	; 0x07
    12f8:	f8 85       	ldd	r31, Y+8	; 0x08
    12fa:	e0 0f       	add	r30, r16
    12fc:	f1 1f       	adc	r31, r17
    12fe:	10 82       	st	Z, r1
    1300:	2e 96       	adiw	r28, 0x0e	; 14
    1302:	e4 e0       	ldi	r30, 0x04	; 4
    1304:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__epilogue_restores__+0x1c>

00001308 <sscanf>:
    1308:	ae e0       	ldi	r26, 0x0E	; 14
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	ea e8       	ldi	r30, 0x8A	; 138
    130e:	f9 e0       	ldi	r31, 0x09	; 9
    1310:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__prologue_saves__+0x20>
    1314:	85 e0       	ldi	r24, 0x05	; 5
    1316:	8c 83       	std	Y+4, r24	; 0x04
    1318:	8b 89       	ldd	r24, Y+19	; 0x13
    131a:	9c 89       	ldd	r25, Y+20	; 0x14
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	ae 01       	movw	r20, r28
    1322:	49 5e       	subi	r20, 0xE9	; 233
    1324:	5f 4f       	sbci	r21, 0xFF	; 255
    1326:	6d 89       	ldd	r22, Y+21	; 0x15
    1328:	7e 89       	ldd	r23, Y+22	; 0x16
    132a:	ce 01       	movw	r24, r28
    132c:	01 96       	adiw	r24, 0x01	; 1
    132e:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <vfscanf>
    1332:	2e 96       	adiw	r28, 0x0e	; 14
    1334:	e2 e0       	ldi	r30, 0x02	; 2
    1336:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__epilogue_restores__+0x20>

0000133a <vfprintf>:
    133a:	ab e0       	ldi	r26, 0x0B	; 11
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e3 ea       	ldi	r30, 0xA3	; 163
    1340:	f9 e0       	ldi	r31, 0x09	; 9
    1342:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__prologue_saves__>
    1346:	6c 01       	movw	r12, r24
    1348:	7b 01       	movw	r14, r22
    134a:	8a 01       	movw	r16, r20
    134c:	fc 01       	movw	r30, r24
    134e:	17 82       	std	Z+7, r1	; 0x07
    1350:	16 82       	std	Z+6, r1	; 0x06
    1352:	83 81       	ldd	r24, Z+3	; 0x03
    1354:	81 ff       	sbrs	r24, 1
    1356:	cc c1       	rjmp	.+920    	; 0x16f0 <vfprintf+0x3b6>
    1358:	ce 01       	movw	r24, r28
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	3c 01       	movw	r6, r24
    135e:	f6 01       	movw	r30, r12
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	f7 01       	movw	r30, r14
    1364:	93 fd       	sbrc	r25, 3
    1366:	85 91       	lpm	r24, Z+
    1368:	93 ff       	sbrs	r25, 3
    136a:	81 91       	ld	r24, Z+
    136c:	7f 01       	movw	r14, r30
    136e:	88 23       	and	r24, r24
    1370:	09 f4       	brne	.+2      	; 0x1374 <vfprintf+0x3a>
    1372:	ba c1       	rjmp	.+884    	; 0x16e8 <vfprintf+0x3ae>
    1374:	85 32       	cpi	r24, 0x25	; 37
    1376:	39 f4       	brne	.+14     	; 0x1386 <vfprintf+0x4c>
    1378:	93 fd       	sbrc	r25, 3
    137a:	85 91       	lpm	r24, Z+
    137c:	93 ff       	sbrs	r25, 3
    137e:	81 91       	ld	r24, Z+
    1380:	7f 01       	movw	r14, r30
    1382:	85 32       	cpi	r24, 0x25	; 37
    1384:	29 f4       	brne	.+10     	; 0x1390 <vfprintf+0x56>
    1386:	b6 01       	movw	r22, r12
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    138e:	e7 cf       	rjmp	.-50     	; 0x135e <vfprintf+0x24>
    1390:	91 2c       	mov	r9, r1
    1392:	21 2c       	mov	r2, r1
    1394:	31 2c       	mov	r3, r1
    1396:	ff e1       	ldi	r31, 0x1F	; 31
    1398:	f3 15       	cp	r31, r3
    139a:	d8 f0       	brcs	.+54     	; 0x13d2 <vfprintf+0x98>
    139c:	8b 32       	cpi	r24, 0x2B	; 43
    139e:	79 f0       	breq	.+30     	; 0x13be <vfprintf+0x84>
    13a0:	38 f4       	brcc	.+14     	; 0x13b0 <vfprintf+0x76>
    13a2:	80 32       	cpi	r24, 0x20	; 32
    13a4:	79 f0       	breq	.+30     	; 0x13c4 <vfprintf+0x8a>
    13a6:	83 32       	cpi	r24, 0x23	; 35
    13a8:	a1 f4       	brne	.+40     	; 0x13d2 <vfprintf+0x98>
    13aa:	23 2d       	mov	r18, r3
    13ac:	20 61       	ori	r18, 0x10	; 16
    13ae:	1d c0       	rjmp	.+58     	; 0x13ea <vfprintf+0xb0>
    13b0:	8d 32       	cpi	r24, 0x2D	; 45
    13b2:	61 f0       	breq	.+24     	; 0x13cc <vfprintf+0x92>
    13b4:	80 33       	cpi	r24, 0x30	; 48
    13b6:	69 f4       	brne	.+26     	; 0x13d2 <vfprintf+0x98>
    13b8:	23 2d       	mov	r18, r3
    13ba:	21 60       	ori	r18, 0x01	; 1
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <vfprintf+0xb0>
    13be:	83 2d       	mov	r24, r3
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	38 2e       	mov	r3, r24
    13c4:	e3 2d       	mov	r30, r3
    13c6:	e4 60       	ori	r30, 0x04	; 4
    13c8:	3e 2e       	mov	r3, r30
    13ca:	2a c0       	rjmp	.+84     	; 0x1420 <vfprintf+0xe6>
    13cc:	f3 2d       	mov	r31, r3
    13ce:	f8 60       	ori	r31, 0x08	; 8
    13d0:	1d c0       	rjmp	.+58     	; 0x140c <vfprintf+0xd2>
    13d2:	37 fc       	sbrc	r3, 7
    13d4:	2d c0       	rjmp	.+90     	; 0x1430 <vfprintf+0xf6>
    13d6:	20 ed       	ldi	r18, 0xD0	; 208
    13d8:	28 0f       	add	r18, r24
    13da:	2a 30       	cpi	r18, 0x0A	; 10
    13dc:	40 f0       	brcs	.+16     	; 0x13ee <vfprintf+0xb4>
    13de:	8e 32       	cpi	r24, 0x2E	; 46
    13e0:	b9 f4       	brne	.+46     	; 0x1410 <vfprintf+0xd6>
    13e2:	36 fc       	sbrc	r3, 6
    13e4:	81 c1       	rjmp	.+770    	; 0x16e8 <vfprintf+0x3ae>
    13e6:	23 2d       	mov	r18, r3
    13e8:	20 64       	ori	r18, 0x40	; 64
    13ea:	32 2e       	mov	r3, r18
    13ec:	19 c0       	rjmp	.+50     	; 0x1420 <vfprintf+0xe6>
    13ee:	36 fe       	sbrs	r3, 6
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <vfprintf+0xc4>
    13f2:	8a e0       	ldi	r24, 0x0A	; 10
    13f4:	98 9e       	mul	r9, r24
    13f6:	20 0d       	add	r18, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	92 2e       	mov	r9, r18
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <vfprintf+0xe6>
    13fe:	ea e0       	ldi	r30, 0x0A	; 10
    1400:	2e 9e       	mul	r2, r30
    1402:	20 0d       	add	r18, r0
    1404:	11 24       	eor	r1, r1
    1406:	22 2e       	mov	r2, r18
    1408:	f3 2d       	mov	r31, r3
    140a:	f0 62       	ori	r31, 0x20	; 32
    140c:	3f 2e       	mov	r3, r31
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <vfprintf+0xe6>
    1410:	8c 36       	cpi	r24, 0x6C	; 108
    1412:	21 f4       	brne	.+8      	; 0x141c <vfprintf+0xe2>
    1414:	83 2d       	mov	r24, r3
    1416:	80 68       	ori	r24, 0x80	; 128
    1418:	38 2e       	mov	r3, r24
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0xe6>
    141c:	88 36       	cpi	r24, 0x68	; 104
    141e:	41 f4       	brne	.+16     	; 0x1430 <vfprintf+0xf6>
    1420:	f7 01       	movw	r30, r14
    1422:	93 fd       	sbrc	r25, 3
    1424:	85 91       	lpm	r24, Z+
    1426:	93 ff       	sbrs	r25, 3
    1428:	81 91       	ld	r24, Z+
    142a:	7f 01       	movw	r14, r30
    142c:	81 11       	cpse	r24, r1
    142e:	b3 cf       	rjmp	.-154    	; 0x1396 <vfprintf+0x5c>
    1430:	98 2f       	mov	r25, r24
    1432:	9f 7d       	andi	r25, 0xDF	; 223
    1434:	95 54       	subi	r25, 0x45	; 69
    1436:	93 30       	cpi	r25, 0x03	; 3
    1438:	28 f4       	brcc	.+10     	; 0x1444 <vfprintf+0x10a>
    143a:	0c 5f       	subi	r16, 0xFC	; 252
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	9f e3       	ldi	r25, 0x3F	; 63
    1440:	99 83       	std	Y+1, r25	; 0x01
    1442:	0d c0       	rjmp	.+26     	; 0x145e <vfprintf+0x124>
    1444:	83 36       	cpi	r24, 0x63	; 99
    1446:	31 f0       	breq	.+12     	; 0x1454 <vfprintf+0x11a>
    1448:	83 37       	cpi	r24, 0x73	; 115
    144a:	71 f0       	breq	.+28     	; 0x1468 <vfprintf+0x12e>
    144c:	83 35       	cpi	r24, 0x53	; 83
    144e:	09 f0       	breq	.+2      	; 0x1452 <vfprintf+0x118>
    1450:	59 c0       	rjmp	.+178    	; 0x1504 <vfprintf+0x1ca>
    1452:	21 c0       	rjmp	.+66     	; 0x1496 <vfprintf+0x15c>
    1454:	f8 01       	movw	r30, r16
    1456:	80 81       	ld	r24, Z
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	0e 5f       	subi	r16, 0xFE	; 254
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	88 24       	eor	r8, r8
    1460:	83 94       	inc	r8
    1462:	91 2c       	mov	r9, r1
    1464:	53 01       	movw	r10, r6
    1466:	13 c0       	rjmp	.+38     	; 0x148e <vfprintf+0x154>
    1468:	28 01       	movw	r4, r16
    146a:	f2 e0       	ldi	r31, 0x02	; 2
    146c:	4f 0e       	add	r4, r31
    146e:	51 1c       	adc	r5, r1
    1470:	f8 01       	movw	r30, r16
    1472:	a0 80       	ld	r10, Z
    1474:	b1 80       	ldd	r11, Z+1	; 0x01
    1476:	36 fe       	sbrs	r3, 6
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfprintf+0x146>
    147a:	69 2d       	mov	r22, r9
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0x14a>
    1480:	6f ef       	ldi	r22, 0xFF	; 255
    1482:	7f ef       	ldi	r23, 0xFF	; 255
    1484:	c5 01       	movw	r24, r10
    1486:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <strnlen>
    148a:	4c 01       	movw	r8, r24
    148c:	82 01       	movw	r16, r4
    148e:	f3 2d       	mov	r31, r3
    1490:	ff 77       	andi	r31, 0x7F	; 127
    1492:	3f 2e       	mov	r3, r31
    1494:	16 c0       	rjmp	.+44     	; 0x14c2 <vfprintf+0x188>
    1496:	28 01       	movw	r4, r16
    1498:	22 e0       	ldi	r18, 0x02	; 2
    149a:	42 0e       	add	r4, r18
    149c:	51 1c       	adc	r5, r1
    149e:	f8 01       	movw	r30, r16
    14a0:	a0 80       	ld	r10, Z
    14a2:	b1 80       	ldd	r11, Z+1	; 0x01
    14a4:	36 fe       	sbrs	r3, 6
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <vfprintf+0x174>
    14a8:	69 2d       	mov	r22, r9
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x178>
    14ae:	6f ef       	ldi	r22, 0xFF	; 255
    14b0:	7f ef       	ldi	r23, 0xFF	; 255
    14b2:	c5 01       	movw	r24, r10
    14b4:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <strnlen_P>
    14b8:	4c 01       	movw	r8, r24
    14ba:	f3 2d       	mov	r31, r3
    14bc:	f0 68       	ori	r31, 0x80	; 128
    14be:	3f 2e       	mov	r3, r31
    14c0:	82 01       	movw	r16, r4
    14c2:	33 fc       	sbrc	r3, 3
    14c4:	1b c0       	rjmp	.+54     	; 0x14fc <vfprintf+0x1c2>
    14c6:	82 2d       	mov	r24, r2
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	88 16       	cp	r8, r24
    14cc:	99 06       	cpc	r9, r25
    14ce:	b0 f4       	brcc	.+44     	; 0x14fc <vfprintf+0x1c2>
    14d0:	b6 01       	movw	r22, r12
    14d2:	80 e2       	ldi	r24, 0x20	; 32
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    14da:	2a 94       	dec	r2
    14dc:	f4 cf       	rjmp	.-24     	; 0x14c6 <vfprintf+0x18c>
    14de:	f5 01       	movw	r30, r10
    14e0:	37 fc       	sbrc	r3, 7
    14e2:	85 91       	lpm	r24, Z+
    14e4:	37 fe       	sbrs	r3, 7
    14e6:	81 91       	ld	r24, Z+
    14e8:	5f 01       	movw	r10, r30
    14ea:	b6 01       	movw	r22, r12
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    14f2:	21 10       	cpse	r2, r1
    14f4:	2a 94       	dec	r2
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	82 1a       	sub	r8, r18
    14fa:	91 08       	sbc	r9, r1
    14fc:	81 14       	cp	r8, r1
    14fe:	91 04       	cpc	r9, r1
    1500:	71 f7       	brne	.-36     	; 0x14de <vfprintf+0x1a4>
    1502:	e8 c0       	rjmp	.+464    	; 0x16d4 <vfprintf+0x39a>
    1504:	84 36       	cpi	r24, 0x64	; 100
    1506:	11 f0       	breq	.+4      	; 0x150c <vfprintf+0x1d2>
    1508:	89 36       	cpi	r24, 0x69	; 105
    150a:	41 f5       	brne	.+80     	; 0x155c <vfprintf+0x222>
    150c:	f8 01       	movw	r30, r16
    150e:	37 fe       	sbrs	r3, 7
    1510:	07 c0       	rjmp	.+14     	; 0x1520 <vfprintf+0x1e6>
    1512:	60 81       	ld	r22, Z
    1514:	71 81       	ldd	r23, Z+1	; 0x01
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	0c 5f       	subi	r16, 0xFC	; 252
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <vfprintf+0x1f6>
    1520:	60 81       	ld	r22, Z
    1522:	71 81       	ldd	r23, Z+1	; 0x01
    1524:	07 2e       	mov	r0, r23
    1526:	00 0c       	add	r0, r0
    1528:	88 0b       	sbc	r24, r24
    152a:	99 0b       	sbc	r25, r25
    152c:	0e 5f       	subi	r16, 0xFE	; 254
    152e:	1f 4f       	sbci	r17, 0xFF	; 255
    1530:	f3 2d       	mov	r31, r3
    1532:	ff 76       	andi	r31, 0x6F	; 111
    1534:	3f 2e       	mov	r3, r31
    1536:	97 ff       	sbrs	r25, 7
    1538:	09 c0       	rjmp	.+18     	; 0x154c <vfprintf+0x212>
    153a:	90 95       	com	r25
    153c:	80 95       	com	r24
    153e:	70 95       	com	r23
    1540:	61 95       	neg	r22
    1542:	7f 4f       	sbci	r23, 0xFF	; 255
    1544:	8f 4f       	sbci	r24, 0xFF	; 255
    1546:	9f 4f       	sbci	r25, 0xFF	; 255
    1548:	f0 68       	ori	r31, 0x80	; 128
    154a:	3f 2e       	mov	r3, r31
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	a3 01       	movw	r20, r6
    1552:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    1556:	88 2e       	mov	r8, r24
    1558:	86 18       	sub	r8, r6
    155a:	45 c0       	rjmp	.+138    	; 0x15e6 <vfprintf+0x2ac>
    155c:	85 37       	cpi	r24, 0x75	; 117
    155e:	31 f4       	brne	.+12     	; 0x156c <vfprintf+0x232>
    1560:	23 2d       	mov	r18, r3
    1562:	2f 7e       	andi	r18, 0xEF	; 239
    1564:	b2 2e       	mov	r11, r18
    1566:	2a e0       	ldi	r18, 0x0A	; 10
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	25 c0       	rjmp	.+74     	; 0x15b6 <vfprintf+0x27c>
    156c:	93 2d       	mov	r25, r3
    156e:	99 7f       	andi	r25, 0xF9	; 249
    1570:	b9 2e       	mov	r11, r25
    1572:	8f 36       	cpi	r24, 0x6F	; 111
    1574:	c1 f0       	breq	.+48     	; 0x15a6 <vfprintf+0x26c>
    1576:	18 f4       	brcc	.+6      	; 0x157e <vfprintf+0x244>
    1578:	88 35       	cpi	r24, 0x58	; 88
    157a:	79 f0       	breq	.+30     	; 0x159a <vfprintf+0x260>
    157c:	b5 c0       	rjmp	.+362    	; 0x16e8 <vfprintf+0x3ae>
    157e:	80 37       	cpi	r24, 0x70	; 112
    1580:	19 f0       	breq	.+6      	; 0x1588 <vfprintf+0x24e>
    1582:	88 37       	cpi	r24, 0x78	; 120
    1584:	21 f0       	breq	.+8      	; 0x158e <vfprintf+0x254>
    1586:	b0 c0       	rjmp	.+352    	; 0x16e8 <vfprintf+0x3ae>
    1588:	e9 2f       	mov	r30, r25
    158a:	e0 61       	ori	r30, 0x10	; 16
    158c:	be 2e       	mov	r11, r30
    158e:	b4 fe       	sbrs	r11, 4
    1590:	0d c0       	rjmp	.+26     	; 0x15ac <vfprintf+0x272>
    1592:	fb 2d       	mov	r31, r11
    1594:	f4 60       	ori	r31, 0x04	; 4
    1596:	bf 2e       	mov	r11, r31
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <vfprintf+0x272>
    159a:	34 fe       	sbrs	r3, 4
    159c:	0a c0       	rjmp	.+20     	; 0x15b2 <vfprintf+0x278>
    159e:	29 2f       	mov	r18, r25
    15a0:	26 60       	ori	r18, 0x06	; 6
    15a2:	b2 2e       	mov	r11, r18
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <vfprintf+0x278>
    15a6:	28 e0       	ldi	r18, 0x08	; 8
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	05 c0       	rjmp	.+10     	; 0x15b6 <vfprintf+0x27c>
    15ac:	20 e1       	ldi	r18, 0x10	; 16
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x27c>
    15b2:	20 e1       	ldi	r18, 0x10	; 16
    15b4:	32 e0       	ldi	r19, 0x02	; 2
    15b6:	f8 01       	movw	r30, r16
    15b8:	b7 fe       	sbrs	r11, 7
    15ba:	07 c0       	rjmp	.+14     	; 0x15ca <vfprintf+0x290>
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	0c 5f       	subi	r16, 0xFC	; 252
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0x29c>
    15ca:	60 81       	ld	r22, Z
    15cc:	71 81       	ldd	r23, Z+1	; 0x01
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 5f       	subi	r16, 0xFE	; 254
    15d4:	1f 4f       	sbci	r17, 0xFF	; 255
    15d6:	a3 01       	movw	r20, r6
    15d8:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    15dc:	88 2e       	mov	r8, r24
    15de:	86 18       	sub	r8, r6
    15e0:	fb 2d       	mov	r31, r11
    15e2:	ff 77       	andi	r31, 0x7F	; 127
    15e4:	3f 2e       	mov	r3, r31
    15e6:	36 fe       	sbrs	r3, 6
    15e8:	0d c0       	rjmp	.+26     	; 0x1604 <vfprintf+0x2ca>
    15ea:	23 2d       	mov	r18, r3
    15ec:	2e 7f       	andi	r18, 0xFE	; 254
    15ee:	a2 2e       	mov	r10, r18
    15f0:	89 14       	cp	r8, r9
    15f2:	58 f4       	brcc	.+22     	; 0x160a <vfprintf+0x2d0>
    15f4:	34 fe       	sbrs	r3, 4
    15f6:	0b c0       	rjmp	.+22     	; 0x160e <vfprintf+0x2d4>
    15f8:	32 fc       	sbrc	r3, 2
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <vfprintf+0x2d4>
    15fc:	83 2d       	mov	r24, r3
    15fe:	8e 7e       	andi	r24, 0xEE	; 238
    1600:	a8 2e       	mov	r10, r24
    1602:	05 c0       	rjmp	.+10     	; 0x160e <vfprintf+0x2d4>
    1604:	b8 2c       	mov	r11, r8
    1606:	a3 2c       	mov	r10, r3
    1608:	03 c0       	rjmp	.+6      	; 0x1610 <vfprintf+0x2d6>
    160a:	b8 2c       	mov	r11, r8
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <vfprintf+0x2d6>
    160e:	b9 2c       	mov	r11, r9
    1610:	a4 fe       	sbrs	r10, 4
    1612:	0f c0       	rjmp	.+30     	; 0x1632 <vfprintf+0x2f8>
    1614:	fe 01       	movw	r30, r28
    1616:	e8 0d       	add	r30, r8
    1618:	f1 1d       	adc	r31, r1
    161a:	80 81       	ld	r24, Z
    161c:	80 33       	cpi	r24, 0x30	; 48
    161e:	21 f4       	brne	.+8      	; 0x1628 <vfprintf+0x2ee>
    1620:	9a 2d       	mov	r25, r10
    1622:	99 7e       	andi	r25, 0xE9	; 233
    1624:	a9 2e       	mov	r10, r25
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x300>
    1628:	a2 fe       	sbrs	r10, 2
    162a:	06 c0       	rjmp	.+12     	; 0x1638 <vfprintf+0x2fe>
    162c:	b3 94       	inc	r11
    162e:	b3 94       	inc	r11
    1630:	04 c0       	rjmp	.+8      	; 0x163a <vfprintf+0x300>
    1632:	8a 2d       	mov	r24, r10
    1634:	86 78       	andi	r24, 0x86	; 134
    1636:	09 f0       	breq	.+2      	; 0x163a <vfprintf+0x300>
    1638:	b3 94       	inc	r11
    163a:	a3 fc       	sbrc	r10, 3
    163c:	11 c0       	rjmp	.+34     	; 0x1660 <vfprintf+0x326>
    163e:	a0 fe       	sbrs	r10, 0
    1640:	06 c0       	rjmp	.+12     	; 0x164e <vfprintf+0x314>
    1642:	b2 14       	cp	r11, r2
    1644:	88 f4       	brcc	.+34     	; 0x1668 <vfprintf+0x32e>
    1646:	28 0c       	add	r2, r8
    1648:	92 2c       	mov	r9, r2
    164a:	9b 18       	sub	r9, r11
    164c:	0e c0       	rjmp	.+28     	; 0x166a <vfprintf+0x330>
    164e:	b2 14       	cp	r11, r2
    1650:	60 f4       	brcc	.+24     	; 0x166a <vfprintf+0x330>
    1652:	b6 01       	movw	r22, r12
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    165c:	b3 94       	inc	r11
    165e:	f7 cf       	rjmp	.-18     	; 0x164e <vfprintf+0x314>
    1660:	b2 14       	cp	r11, r2
    1662:	18 f4       	brcc	.+6      	; 0x166a <vfprintf+0x330>
    1664:	2b 18       	sub	r2, r11
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0x332>
    1668:	98 2c       	mov	r9, r8
    166a:	21 2c       	mov	r2, r1
    166c:	a4 fe       	sbrs	r10, 4
    166e:	10 c0       	rjmp	.+32     	; 0x1690 <vfprintf+0x356>
    1670:	b6 01       	movw	r22, r12
    1672:	80 e3       	ldi	r24, 0x30	; 48
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    167a:	a2 fe       	sbrs	r10, 2
    167c:	17 c0       	rjmp	.+46     	; 0x16ac <vfprintf+0x372>
    167e:	a1 fc       	sbrc	r10, 1
    1680:	03 c0       	rjmp	.+6      	; 0x1688 <vfprintf+0x34e>
    1682:	88 e7       	ldi	r24, 0x78	; 120
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 c0       	rjmp	.+4      	; 0x168c <vfprintf+0x352>
    1688:	88 e5       	ldi	r24, 0x58	; 88
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	b6 01       	movw	r22, r12
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <vfprintf+0x36e>
    1690:	8a 2d       	mov	r24, r10
    1692:	86 78       	andi	r24, 0x86	; 134
    1694:	59 f0       	breq	.+22     	; 0x16ac <vfprintf+0x372>
    1696:	a1 fe       	sbrs	r10, 1
    1698:	02 c0       	rjmp	.+4      	; 0x169e <vfprintf+0x364>
    169a:	8b e2       	ldi	r24, 0x2B	; 43
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <vfprintf+0x366>
    169e:	80 e2       	ldi	r24, 0x20	; 32
    16a0:	a7 fc       	sbrc	r10, 7
    16a2:	8d e2       	ldi	r24, 0x2D	; 45
    16a4:	b6 01       	movw	r22, r12
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    16ac:	89 14       	cp	r8, r9
    16ae:	38 f4       	brcc	.+14     	; 0x16be <vfprintf+0x384>
    16b0:	b6 01       	movw	r22, r12
    16b2:	80 e3       	ldi	r24, 0x30	; 48
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    16ba:	9a 94       	dec	r9
    16bc:	f7 cf       	rjmp	.-18     	; 0x16ac <vfprintf+0x372>
    16be:	8a 94       	dec	r8
    16c0:	f3 01       	movw	r30, r6
    16c2:	e8 0d       	add	r30, r8
    16c4:	f1 1d       	adc	r31, r1
    16c6:	80 81       	ld	r24, Z
    16c8:	b6 01       	movw	r22, r12
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    16d0:	81 10       	cpse	r8, r1
    16d2:	f5 cf       	rjmp	.-22     	; 0x16be <vfprintf+0x384>
    16d4:	22 20       	and	r2, r2
    16d6:	09 f4       	brne	.+2      	; 0x16da <vfprintf+0x3a0>
    16d8:	42 ce       	rjmp	.-892    	; 0x135e <vfprintf+0x24>
    16da:	b6 01       	movw	r22, r12
    16dc:	80 e2       	ldi	r24, 0x20	; 32
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <fputc>
    16e4:	2a 94       	dec	r2
    16e6:	f6 cf       	rjmp	.-20     	; 0x16d4 <vfprintf+0x39a>
    16e8:	f6 01       	movw	r30, r12
    16ea:	86 81       	ldd	r24, Z+6	; 0x06
    16ec:	97 81       	ldd	r25, Z+7	; 0x07
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <vfprintf+0x3ba>
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	9f ef       	ldi	r25, 0xFF	; 255
    16f4:	2b 96       	adiw	r28, 0x0b	; 11
    16f6:	e2 e1       	ldi	r30, 0x12	; 18
    16f8:	0c 94 65 0f 	jmp	0x1eca	; 0x1eca <__epilogue_restores__>

000016fc <putval>:
    16fc:	20 fd       	sbrc	r18, 0
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <putval+0x16>
    1700:	fc 01       	movw	r30, r24
    1702:	23 fd       	sbrc	r18, 3
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <putval+0x14>
    1706:	22 ff       	sbrs	r18, 2
    1708:	02 c0       	rjmp	.+4      	; 0x170e <putval+0x12>
    170a:	73 83       	std	Z+3, r23	; 0x03
    170c:	62 83       	std	Z+2, r22	; 0x02
    170e:	51 83       	std	Z+1, r21	; 0x01
    1710:	40 83       	st	Z, r20
    1712:	08 95       	ret

00001714 <mulacc>:
    1714:	44 fd       	sbrc	r20, 4
    1716:	17 c0       	rjmp	.+46     	; 0x1746 <mulacc+0x32>
    1718:	46 fd       	sbrc	r20, 6
    171a:	17 c0       	rjmp	.+46     	; 0x174a <mulacc+0x36>
    171c:	ab 01       	movw	r20, r22
    171e:	bc 01       	movw	r22, r24
    1720:	da 01       	movw	r26, r20
    1722:	fb 01       	movw	r30, r22
    1724:	aa 0f       	add	r26, r26
    1726:	bb 1f       	adc	r27, r27
    1728:	ee 1f       	adc	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	10 94       	com	r1
    172e:	d1 f7       	brne	.-12     	; 0x1724 <mulacc+0x10>
    1730:	4a 0f       	add	r20, r26
    1732:	5b 1f       	adc	r21, r27
    1734:	6e 1f       	adc	r22, r30
    1736:	7f 1f       	adc	r23, r31
    1738:	cb 01       	movw	r24, r22
    173a:	ba 01       	movw	r22, r20
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <mulacc+0x44>
    1746:	33 e0       	ldi	r19, 0x03	; 3
    1748:	01 c0       	rjmp	.+2      	; 0x174c <mulacc+0x38>
    174a:	34 e0       	ldi	r19, 0x04	; 4
    174c:	66 0f       	add	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	88 1f       	adc	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	31 50       	subi	r19, 0x01	; 1
    1756:	d1 f7       	brne	.-12     	; 0x174c <mulacc+0x38>
    1758:	62 0f       	add	r22, r18
    175a:	71 1d       	adc	r23, r1
    175c:	81 1d       	adc	r24, r1
    175e:	91 1d       	adc	r25, r1
    1760:	08 95       	ret

00001762 <skip_spaces>:
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	8c 01       	movw	r16, r24
    176c:	c8 01       	movw	r24, r16
    176e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1772:	ec 01       	movw	r28, r24
    1774:	97 fd       	sbrc	r25, 7
    1776:	08 c0       	rjmp	.+16     	; 0x1788 <skip_spaces+0x26>
    1778:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <isspace>
    177c:	89 2b       	or	r24, r25
    177e:	b1 f7       	brne	.-20     	; 0x176c <skip_spaces+0xa>
    1780:	b8 01       	movw	r22, r16
    1782:	ce 01       	movw	r24, r28
    1784:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <ungetc>
    1788:	ce 01       	movw	r24, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	08 95       	ret

00001794 <conv_int>:
    1794:	8f 92       	push	r8
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	8c 01       	movw	r16, r24
    17aa:	d6 2f       	mov	r29, r22
    17ac:	7a 01       	movw	r14, r20
    17ae:	b2 2e       	mov	r11, r18
    17b0:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    17b4:	9c 01       	movw	r18, r24
    17b6:	33 27       	eor	r19, r19
    17b8:	2b 32       	cpi	r18, 0x2B	; 43
    17ba:	31 05       	cpc	r19, r1
    17bc:	31 f0       	breq	.+12     	; 0x17ca <conv_int+0x36>
    17be:	2d 32       	cpi	r18, 0x2D	; 45
    17c0:	31 05       	cpc	r19, r1
    17c2:	61 f4       	brne	.+24     	; 0x17dc <conv_int+0x48>
    17c4:	8b 2d       	mov	r24, r11
    17c6:	80 68       	ori	r24, 0x80	; 128
    17c8:	b8 2e       	mov	r11, r24
    17ca:	d1 50       	subi	r29, 0x01	; 1
    17cc:	11 f4       	brne	.+4      	; 0x17d2 <conv_int+0x3e>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	68 c0       	rjmp	.+208    	; 0x18a2 <conv_int+0x10e>
    17d2:	c8 01       	movw	r24, r16
    17d4:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    17d8:	97 fd       	sbrc	r25, 7
    17da:	f9 cf       	rjmp	.-14     	; 0x17ce <conv_int+0x3a>
    17dc:	cb 2d       	mov	r28, r11
    17de:	cd 7f       	andi	r28, 0xFD	; 253
    17e0:	2b 2d       	mov	r18, r11
    17e2:	20 73       	andi	r18, 0x30	; 48
    17e4:	09 f5       	brne	.+66     	; 0x1828 <conv_int+0x94>
    17e6:	80 33       	cpi	r24, 0x30	; 48
    17e8:	f9 f4       	brne	.+62     	; 0x1828 <conv_int+0x94>
    17ea:	aa 24       	eor	r10, r10
    17ec:	aa 94       	dec	r10
    17ee:	ad 0e       	add	r10, r29
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <conv_int+0x60>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <conv_int+0xe6>
    17f4:	c8 01       	movw	r24, r16
    17f6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    17fa:	97 fd       	sbrc	r25, 7
    17fc:	3e c0       	rjmp	.+124    	; 0x187a <conv_int+0xe6>
    17fe:	9c 01       	movw	r18, r24
    1800:	2f 7d       	andi	r18, 0xDF	; 223
    1802:	33 27       	eor	r19, r19
    1804:	28 35       	cpi	r18, 0x58	; 88
    1806:	31 05       	cpc	r19, r1
    1808:	49 f4       	brne	.+18     	; 0x181c <conv_int+0x88>
    180a:	c2 64       	ori	r28, 0x42	; 66
    180c:	d2 50       	subi	r29, 0x02	; 2
    180e:	a9 f1       	breq	.+106    	; 0x187a <conv_int+0xe6>
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1816:	97 ff       	sbrs	r25, 7
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <conv_int+0x94>
    181a:	2f c0       	rjmp	.+94     	; 0x187a <conv_int+0xe6>
    181c:	b6 fe       	sbrs	r11, 6
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <conv_int+0x90>
    1820:	c2 60       	ori	r28, 0x02	; 2
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <conv_int+0x92>
    1824:	c2 61       	ori	r28, 0x12	; 18
    1826:	da 2d       	mov	r29, r10
    1828:	81 2c       	mov	r8, r1
    182a:	91 2c       	mov	r9, r1
    182c:	54 01       	movw	r10, r8
    182e:	20 ed       	ldi	r18, 0xD0	; 208
    1830:	28 0f       	add	r18, r24
    1832:	28 30       	cpi	r18, 0x08	; 8
    1834:	80 f0       	brcs	.+32     	; 0x1856 <conv_int+0xc2>
    1836:	c4 ff       	sbrs	r28, 4
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <conv_int+0xae>
    183a:	b8 01       	movw	r22, r16
    183c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <ungetc>
    1840:	19 c0       	rjmp	.+50     	; 0x1874 <conv_int+0xe0>
    1842:	2a 30       	cpi	r18, 0x0A	; 10
    1844:	40 f0       	brcs	.+16     	; 0x1856 <conv_int+0xc2>
    1846:	c6 ff       	sbrs	r28, 6
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <conv_int+0xa6>
    184a:	2f 7d       	andi	r18, 0xDF	; 223
    184c:	3f ee       	ldi	r19, 0xEF	; 239
    184e:	32 0f       	add	r19, r18
    1850:	36 30       	cpi	r19, 0x06	; 6
    1852:	98 f7       	brcc	.-26     	; 0x183a <conv_int+0xa6>
    1854:	27 50       	subi	r18, 0x07	; 7
    1856:	4c 2f       	mov	r20, r28
    1858:	c5 01       	movw	r24, r10
    185a:	b4 01       	movw	r22, r8
    185c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <mulacc>
    1860:	4b 01       	movw	r8, r22
    1862:	5c 01       	movw	r10, r24
    1864:	c2 60       	ori	r28, 0x02	; 2
    1866:	d1 50       	subi	r29, 0x01	; 1
    1868:	59 f0       	breq	.+22     	; 0x1880 <conv_int+0xec>
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1870:	97 ff       	sbrs	r25, 7
    1872:	dd cf       	rjmp	.-70     	; 0x182e <conv_int+0x9a>
    1874:	c1 fd       	sbrc	r28, 1
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <conv_int+0xec>
    1878:	aa cf       	rjmp	.-172    	; 0x17ce <conv_int+0x3a>
    187a:	81 2c       	mov	r8, r1
    187c:	91 2c       	mov	r9, r1
    187e:	54 01       	movw	r10, r8
    1880:	c7 ff       	sbrs	r28, 7
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <conv_int+0x100>
    1884:	b0 94       	com	r11
    1886:	a0 94       	com	r10
    1888:	90 94       	com	r9
    188a:	80 94       	com	r8
    188c:	81 1c       	adc	r8, r1
    188e:	91 1c       	adc	r9, r1
    1890:	a1 1c       	adc	r10, r1
    1892:	b1 1c       	adc	r11, r1
    1894:	2c 2f       	mov	r18, r28
    1896:	b5 01       	movw	r22, r10
    1898:	a4 01       	movw	r20, r8
    189a:	c7 01       	movw	r24, r14
    189c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <putval>
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	ff 90       	pop	r15
    18ac:	ef 90       	pop	r14
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	08 95       	ret

000018b8 <conv_brk>:
    18b8:	a0 e2       	ldi	r26, 0x20	; 32
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e6       	ldi	r30, 0x62	; 98
    18be:	fc e0       	ldi	r31, 0x0C	; 12
    18c0:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x6>
    18c4:	5c 01       	movw	r10, r24
    18c6:	96 2e       	mov	r9, r22
    18c8:	7a 01       	movw	r14, r20
    18ca:	f9 01       	movw	r30, r18
    18cc:	8e 01       	movw	r16, r28
    18ce:	0f 5f       	subi	r16, 0xFF	; 255
    18d0:	1f 4f       	sbci	r17, 0xFF	; 255
    18d2:	68 01       	movw	r12, r16
    18d4:	80 e2       	ldi	r24, 0x20	; 32
    18d6:	d8 01       	movw	r26, r16
    18d8:	1d 92       	st	X+, r1
    18da:	8a 95       	dec	r24
    18dc:	e9 f7       	brne	.-6      	; 0x18d8 <conv_brk+0x20>
    18de:	d5 01       	movw	r26, r10
    18e0:	13 96       	adiw	r26, 0x03	; 3
    18e2:	8c 90       	ld	r8, X
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	61 2c       	mov	r6, r1
    18ea:	71 2c       	mov	r7, r1
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	83 fc       	sbrc	r8, 3
    18f4:	25 91       	lpm	r18, Z+
    18f6:	83 fe       	sbrs	r8, 3
    18f8:	21 91       	ld	r18, Z+
    18fa:	8f 01       	movw	r16, r30
    18fc:	52 2e       	mov	r5, r18
    18fe:	21 11       	cpse	r18, r1
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <conv_brk+0x50>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	92 c0       	rjmp	.+292    	; 0x1a2c <conv_brk+0x174>
    1908:	2e 35       	cpi	r18, 0x5E	; 94
    190a:	11 f4       	brne	.+4      	; 0x1910 <conv_brk+0x58>
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	51 f1       	breq	.+84     	; 0x1964 <conv_brk+0xac>
    1910:	43 2f       	mov	r20, r19
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	48 17       	cp	r20, r24
    1916:	59 07       	cpc	r21, r25
    1918:	3c f4       	brge	.+14     	; 0x1928 <conv_brk+0x70>
    191a:	2d 35       	cpi	r18, 0x5D	; 93
    191c:	59 f1       	breq	.+86     	; 0x1974 <conv_brk+0xbc>
    191e:	2d 32       	cpi	r18, 0x2D	; 45
    1920:	19 f4       	brne	.+6      	; 0x1928 <conv_brk+0x70>
    1922:	77 20       	and	r7, r7
    1924:	09 f1       	breq	.+66     	; 0x1968 <conv_brk+0xb0>
    1926:	03 c0       	rjmp	.+6      	; 0x192e <conv_brk+0x76>
    1928:	77 20       	and	r7, r7
    192a:	09 f4       	brne	.+2      	; 0x192e <conv_brk+0x76>
    192c:	6a c0       	rjmp	.+212    	; 0x1a02 <conv_brk+0x14a>
    192e:	45 2d       	mov	r20, r5
    1930:	46 95       	lsr	r20
    1932:	46 95       	lsr	r20
    1934:	46 95       	lsr	r20
    1936:	d6 01       	movw	r26, r12
    1938:	a4 0f       	add	r26, r20
    193a:	b1 1d       	adc	r27, r1
    193c:	45 2d       	mov	r20, r5
    193e:	47 70       	andi	r20, 0x07	; 7
    1940:	8b 01       	movw	r16, r22
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <conv_brk+0x90>
    1944:	00 0f       	add	r16, r16
    1946:	11 1f       	adc	r17, r17
    1948:	4a 95       	dec	r20
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <conv_brk+0x8c>
    194c:	a8 01       	movw	r20, r16
    194e:	5c 91       	ld	r21, X
    1950:	45 2b       	or	r20, r21
    1952:	4c 93       	st	X, r20
    1954:	65 14       	cp	r6, r5
    1956:	59 f0       	breq	.+22     	; 0x196e <conv_brk+0xb6>
    1958:	56 14       	cp	r5, r6
    195a:	10 f4       	brcc	.+4      	; 0x1960 <conv_brk+0xa8>
    195c:	53 94       	inc	r5
    195e:	e7 cf       	rjmp	.-50     	; 0x192e <conv_brk+0x76>
    1960:	5a 94       	dec	r5
    1962:	e5 cf       	rjmp	.-54     	; 0x192e <conv_brk+0x76>
    1964:	31 e0       	ldi	r19, 0x01	; 1
    1966:	04 c0       	rjmp	.+8      	; 0x1970 <conv_brk+0xb8>
    1968:	77 24       	eor	r7, r7
    196a:	73 94       	inc	r7
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <conv_brk+0xb8>
    196e:	71 2c       	mov	r7, r1
    1970:	01 96       	adiw	r24, 0x01	; 1
    1972:	bf cf       	rjmp	.-130    	; 0x18f2 <conv_brk+0x3a>
    1974:	77 20       	and	r7, r7
    1976:	19 f0       	breq	.+6      	; 0x197e <conv_brk+0xc6>
    1978:	8e 81       	ldd	r24, Y+6	; 0x06
    197a:	80 62       	ori	r24, 0x20	; 32
    197c:	8e 83       	std	Y+6, r24	; 0x06
    197e:	31 11       	cpse	r19, r1
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <conv_brk+0xd0>
    1982:	88 24       	eor	r8, r8
    1984:	83 94       	inc	r8
    1986:	17 c0       	rjmp	.+46     	; 0x19b6 <conv_brk+0xfe>
    1988:	f6 01       	movw	r30, r12
    198a:	9e 01       	movw	r18, r28
    198c:	2f 5d       	subi	r18, 0xDF	; 223
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	80 81       	ld	r24, Z
    1992:	80 95       	com	r24
    1994:	81 93       	st	Z+, r24
    1996:	2e 17       	cp	r18, r30
    1998:	3f 07       	cpc	r19, r31
    199a:	d1 f7       	brne	.-12     	; 0x1990 <conv_brk+0xd8>
    199c:	f2 cf       	rjmp	.-28     	; 0x1982 <conv_brk+0xca>
    199e:	e1 14       	cp	r14, r1
    19a0:	f1 04       	cpc	r15, r1
    19a2:	29 f0       	breq	.+10     	; 0x19ae <conv_brk+0xf6>
    19a4:	d7 01       	movw	r26, r14
    19a6:	8c 93       	st	X, r24
    19a8:	f7 01       	movw	r30, r14
    19aa:	31 96       	adiw	r30, 0x01	; 1
    19ac:	7f 01       	movw	r14, r30
    19ae:	9a 94       	dec	r9
    19b0:	81 2c       	mov	r8, r1
    19b2:	99 20       	and	r9, r9
    19b4:	f9 f0       	breq	.+62     	; 0x19f4 <conv_brk+0x13c>
    19b6:	c5 01       	movw	r24, r10
    19b8:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    19bc:	97 fd       	sbrc	r25, 7
    19be:	18 c0       	rjmp	.+48     	; 0x19f0 <conv_brk+0x138>
    19c0:	fc 01       	movw	r30, r24
    19c2:	ff 27       	eor	r31, r31
    19c4:	23 e0       	ldi	r18, 0x03	; 3
    19c6:	f5 95       	asr	r31
    19c8:	e7 95       	ror	r30
    19ca:	2a 95       	dec	r18
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <conv_brk+0x10e>
    19ce:	ec 0d       	add	r30, r12
    19d0:	fd 1d       	adc	r31, r13
    19d2:	20 81       	ld	r18, Z
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	ac 01       	movw	r20, r24
    19d8:	47 70       	andi	r20, 0x07	; 7
    19da:	55 27       	eor	r21, r21
    19dc:	02 c0       	rjmp	.+4      	; 0x19e2 <conv_brk+0x12a>
    19de:	35 95       	asr	r19
    19e0:	27 95       	ror	r18
    19e2:	4a 95       	dec	r20
    19e4:	e2 f7       	brpl	.-8      	; 0x19de <conv_brk+0x126>
    19e6:	20 fd       	sbrc	r18, 0
    19e8:	da cf       	rjmp	.-76     	; 0x199e <conv_brk+0xe6>
    19ea:	b5 01       	movw	r22, r10
    19ec:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <ungetc>
    19f0:	81 10       	cpse	r8, r1
    19f2:	87 cf       	rjmp	.-242    	; 0x1902 <conv_brk+0x4a>
    19f4:	e1 14       	cp	r14, r1
    19f6:	f1 04       	cpc	r15, r1
    19f8:	11 f0       	breq	.+4      	; 0x19fe <conv_brk+0x146>
    19fa:	d7 01       	movw	r26, r14
    19fc:	1c 92       	st	X, r1
    19fe:	c8 01       	movw	r24, r16
    1a00:	15 c0       	rjmp	.+42     	; 0x1a2c <conv_brk+0x174>
    1a02:	42 2f       	mov	r20, r18
    1a04:	46 95       	lsr	r20
    1a06:	46 95       	lsr	r20
    1a08:	46 95       	lsr	r20
    1a0a:	d6 01       	movw	r26, r12
    1a0c:	a4 0f       	add	r26, r20
    1a0e:	b1 1d       	adc	r27, r1
    1a10:	42 2f       	mov	r20, r18
    1a12:	47 70       	andi	r20, 0x07	; 7
    1a14:	8b 01       	movw	r16, r22
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <conv_brk+0x164>
    1a18:	00 0f       	add	r16, r16
    1a1a:	11 1f       	adc	r17, r17
    1a1c:	4a 95       	dec	r20
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <conv_brk+0x160>
    1a20:	a8 01       	movw	r20, r16
    1a22:	5c 91       	ld	r21, X
    1a24:	45 2b       	or	r20, r21
    1a26:	4c 93       	st	X, r20
    1a28:	62 2e       	mov	r6, r18
    1a2a:	a2 cf       	rjmp	.-188    	; 0x1970 <conv_brk+0xb8>
    1a2c:	a0 96       	adiw	r28, 0x20	; 32
    1a2e:	ef e0       	ldi	r30, 0x0F	; 15
    1a30:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x6>

00001a34 <vfscanf>:
    1a34:	a0 e0       	ldi	r26, 0x00	; 0
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	e0 e2       	ldi	r30, 0x20	; 32
    1a3a:	fd e0       	ldi	r31, 0x0D	; 13
    1a3c:	0c 94 4c 0f 	jmp	0x1e98	; 0x1e98 <__prologue_saves__+0x6>
    1a40:	6c 01       	movw	r12, r24
    1a42:	eb 01       	movw	r28, r22
    1a44:	5a 01       	movw	r10, r20
    1a46:	fc 01       	movw	r30, r24
    1a48:	17 82       	std	Z+7, r1	; 0x07
    1a4a:	16 82       	std	Z+6, r1	; 0x06
    1a4c:	51 2c       	mov	r5, r1
    1a4e:	f6 01       	movw	r30, r12
    1a50:	e3 80       	ldd	r14, Z+3	; 0x03
    1a52:	fe 01       	movw	r30, r28
    1a54:	e3 fc       	sbrc	r14, 3
    1a56:	85 91       	lpm	r24, Z+
    1a58:	e3 fe       	sbrs	r14, 3
    1a5a:	81 91       	ld	r24, Z+
    1a5c:	18 2f       	mov	r17, r24
    1a5e:	ef 01       	movw	r28, r30
    1a60:	88 23       	and	r24, r24
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <vfscanf+0x32>
    1a64:	ee c0       	rjmp	.+476    	; 0x1c42 <vfscanf+0x20e>
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <isspace>
    1a6c:	89 2b       	or	r24, r25
    1a6e:	21 f0       	breq	.+8      	; 0x1a78 <vfscanf+0x44>
    1a70:	c6 01       	movw	r24, r12
    1a72:	0e 94 b1 0b 	call	0x1762	; 0x1762 <skip_spaces>
    1a76:	eb cf       	rjmp	.-42     	; 0x1a4e <vfscanf+0x1a>
    1a78:	15 32       	cpi	r17, 0x25	; 37
    1a7a:	41 f4       	brne	.+16     	; 0x1a8c <vfscanf+0x58>
    1a7c:	fe 01       	movw	r30, r28
    1a7e:	e3 fc       	sbrc	r14, 3
    1a80:	15 91       	lpm	r17, Z+
    1a82:	e3 fe       	sbrs	r14, 3
    1a84:	11 91       	ld	r17, Z+
    1a86:	ef 01       	movw	r28, r30
    1a88:	15 32       	cpi	r17, 0x25	; 37
    1a8a:	81 f4       	brne	.+32     	; 0x1aac <vfscanf+0x78>
    1a8c:	c6 01       	movw	r24, r12
    1a8e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1a92:	97 fd       	sbrc	r25, 7
    1a94:	d4 c0       	rjmp	.+424    	; 0x1c3e <vfscanf+0x20a>
    1a96:	41 2f       	mov	r20, r17
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	9c 01       	movw	r18, r24
    1a9c:	33 27       	eor	r19, r19
    1a9e:	24 17       	cp	r18, r20
    1aa0:	35 07       	cpc	r19, r21
    1aa2:	a9 f2       	breq	.-86     	; 0x1a4e <vfscanf+0x1a>
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <ungetc>
    1aaa:	cb c0       	rjmp	.+406    	; 0x1c42 <vfscanf+0x20e>
    1aac:	1a 32       	cpi	r17, 0x2A	; 42
    1aae:	39 f4       	brne	.+14     	; 0x1abe <vfscanf+0x8a>
    1ab0:	e3 fc       	sbrc	r14, 3
    1ab2:	15 91       	lpm	r17, Z+
    1ab4:	e3 fe       	sbrs	r14, 3
    1ab6:	11 91       	ld	r17, Z+
    1ab8:	ef 01       	movw	r28, r30
    1aba:	01 e0       	ldi	r16, 0x01	; 1
    1abc:	01 c0       	rjmp	.+2      	; 0x1ac0 <vfscanf+0x8c>
    1abe:	00 e0       	ldi	r16, 0x00	; 0
    1ac0:	f1 2c       	mov	r15, r1
    1ac2:	20 ed       	ldi	r18, 0xD0	; 208
    1ac4:	21 0f       	add	r18, r17
    1ac6:	2a 30       	cpi	r18, 0x0A	; 10
    1ac8:	80 f4       	brcc	.+32     	; 0x1aea <vfscanf+0xb6>
    1aca:	02 60       	ori	r16, 0x02	; 2
    1acc:	6f 2d       	mov	r22, r15
    1ace:	70 e0       	ldi	r23, 0x00	; 0
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <mulacc>
    1ada:	f6 2e       	mov	r15, r22
    1adc:	fe 01       	movw	r30, r28
    1ade:	e3 fc       	sbrc	r14, 3
    1ae0:	15 91       	lpm	r17, Z+
    1ae2:	e3 fe       	sbrs	r14, 3
    1ae4:	11 91       	ld	r17, Z+
    1ae6:	ef 01       	movw	r28, r30
    1ae8:	ec cf       	rjmp	.-40     	; 0x1ac2 <vfscanf+0x8e>
    1aea:	01 ff       	sbrs	r16, 1
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfscanf+0xc0>
    1aee:	f1 10       	cpse	r15, r1
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <vfscanf+0xc4>
    1af2:	a7 c0       	rjmp	.+334    	; 0x1c42 <vfscanf+0x20e>
    1af4:	ff 24       	eor	r15, r15
    1af6:	fa 94       	dec	r15
    1af8:	18 36       	cpi	r17, 0x68	; 104
    1afa:	19 f0       	breq	.+6      	; 0x1b02 <vfscanf+0xce>
    1afc:	1c 36       	cpi	r17, 0x6C	; 108
    1afe:	51 f0       	breq	.+20     	; 0x1b14 <vfscanf+0xe0>
    1b00:	10 c0       	rjmp	.+32     	; 0x1b22 <vfscanf+0xee>
    1b02:	fe 01       	movw	r30, r28
    1b04:	e3 fc       	sbrc	r14, 3
    1b06:	15 91       	lpm	r17, Z+
    1b08:	e3 fe       	sbrs	r14, 3
    1b0a:	11 91       	ld	r17, Z+
    1b0c:	ef 01       	movw	r28, r30
    1b0e:	18 36       	cpi	r17, 0x68	; 104
    1b10:	41 f4       	brne	.+16     	; 0x1b22 <vfscanf+0xee>
    1b12:	08 60       	ori	r16, 0x08	; 8
    1b14:	04 60       	ori	r16, 0x04	; 4
    1b16:	fe 01       	movw	r30, r28
    1b18:	e3 fc       	sbrc	r14, 3
    1b1a:	15 91       	lpm	r17, Z+
    1b1c:	e3 fe       	sbrs	r14, 3
    1b1e:	11 91       	ld	r17, Z+
    1b20:	ef 01       	movw	r28, r30
    1b22:	11 23       	and	r17, r17
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <vfscanf+0xf4>
    1b26:	8d c0       	rjmp	.+282    	; 0x1c42 <vfscanf+0x20e>
    1b28:	61 2f       	mov	r22, r17
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <strchr_P>
    1b34:	89 2b       	or	r24, r25
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <vfscanf+0x106>
    1b38:	84 c0       	rjmp	.+264    	; 0x1c42 <vfscanf+0x20e>
    1b3a:	00 fd       	sbrc	r16, 0
    1b3c:	07 c0       	rjmp	.+14     	; 0x1b4c <vfscanf+0x118>
    1b3e:	f5 01       	movw	r30, r10
    1b40:	80 80       	ld	r8, Z
    1b42:	91 80       	ldd	r9, Z+1	; 0x01
    1b44:	c5 01       	movw	r24, r10
    1b46:	02 96       	adiw	r24, 0x02	; 2
    1b48:	5c 01       	movw	r10, r24
    1b4a:	02 c0       	rjmp	.+4      	; 0x1b50 <vfscanf+0x11c>
    1b4c:	81 2c       	mov	r8, r1
    1b4e:	91 2c       	mov	r9, r1
    1b50:	1e 36       	cpi	r17, 0x6E	; 110
    1b52:	51 f4       	brne	.+20     	; 0x1b68 <vfscanf+0x134>
    1b54:	f6 01       	movw	r30, r12
    1b56:	46 81       	ldd	r20, Z+6	; 0x06
    1b58:	57 81       	ldd	r21, Z+7	; 0x07
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	20 2f       	mov	r18, r16
    1b60:	c4 01       	movw	r24, r8
    1b62:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <putval>
    1b66:	73 cf       	rjmp	.-282    	; 0x1a4e <vfscanf+0x1a>
    1b68:	13 36       	cpi	r17, 0x63	; 99
    1b6a:	a9 f4       	brne	.+42     	; 0x1b96 <vfscanf+0x162>
    1b6c:	01 fd       	sbrc	r16, 1
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfscanf+0x140>
    1b70:	ff 24       	eor	r15, r15
    1b72:	f3 94       	inc	r15
    1b74:	c6 01       	movw	r24, r12
    1b76:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1b7a:	97 fd       	sbrc	r25, 7
    1b7c:	60 c0       	rjmp	.+192    	; 0x1c3e <vfscanf+0x20a>
    1b7e:	81 14       	cp	r8, r1
    1b80:	91 04       	cpc	r9, r1
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <vfscanf+0x15a>
    1b84:	f4 01       	movw	r30, r8
    1b86:	80 83       	st	Z, r24
    1b88:	c4 01       	movw	r24, r8
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	4c 01       	movw	r8, r24
    1b8e:	fa 94       	dec	r15
    1b90:	f1 10       	cpse	r15, r1
    1b92:	f0 cf       	rjmp	.-32     	; 0x1b74 <vfscanf+0x140>
    1b94:	50 c0       	rjmp	.+160    	; 0x1c36 <vfscanf+0x202>
    1b96:	1b 35       	cpi	r17, 0x5B	; 91
    1b98:	59 f4       	brne	.+22     	; 0x1bb0 <vfscanf+0x17c>
    1b9a:	9e 01       	movw	r18, r28
    1b9c:	a4 01       	movw	r20, r8
    1b9e:	6f 2d       	mov	r22, r15
    1ba0:	c6 01       	movw	r24, r12
    1ba2:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <conv_brk>
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	89 2b       	or	r24, r25
    1baa:	09 f0       	breq	.+2      	; 0x1bae <vfscanf+0x17a>
    1bac:	44 c0       	rjmp	.+136    	; 0x1c36 <vfscanf+0x202>
    1bae:	3e c0       	rjmp	.+124    	; 0x1c2c <vfscanf+0x1f8>
    1bb0:	c6 01       	movw	r24, r12
    1bb2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <skip_spaces>
    1bb6:	97 fd       	sbrc	r25, 7
    1bb8:	42 c0       	rjmp	.+132    	; 0x1c3e <vfscanf+0x20a>
    1bba:	1f 36       	cpi	r17, 0x6F	; 111
    1bbc:	61 f1       	breq	.+88     	; 0x1c16 <vfscanf+0x1e2>
    1bbe:	28 f4       	brcc	.+10     	; 0x1bca <vfscanf+0x196>
    1bc0:	14 36       	cpi	r17, 0x64	; 100
    1bc2:	39 f1       	breq	.+78     	; 0x1c12 <vfscanf+0x1de>
    1bc4:	19 36       	cpi	r17, 0x69	; 105
    1bc6:	51 f1       	breq	.+84     	; 0x1c1c <vfscanf+0x1e8>
    1bc8:	28 c0       	rjmp	.+80     	; 0x1c1a <vfscanf+0x1e6>
    1bca:	13 37       	cpi	r17, 0x73	; 115
    1bcc:	71 f0       	breq	.+28     	; 0x1bea <vfscanf+0x1b6>
    1bce:	15 37       	cpi	r17, 0x75	; 117
    1bd0:	01 f1       	breq	.+64     	; 0x1c12 <vfscanf+0x1de>
    1bd2:	23 c0       	rjmp	.+70     	; 0x1c1a <vfscanf+0x1e6>
    1bd4:	81 14       	cp	r8, r1
    1bd6:	91 04       	cpc	r9, r1
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <vfscanf+0x1b0>
    1bda:	f4 01       	movw	r30, r8
    1bdc:	60 82       	st	Z, r6
    1bde:	c4 01       	movw	r24, r8
    1be0:	01 96       	adiw	r24, 0x01	; 1
    1be2:	4c 01       	movw	r8, r24
    1be4:	fa 94       	dec	r15
    1be6:	ff 20       	and	r15, r15
    1be8:	71 f0       	breq	.+28     	; 0x1c06 <vfscanf+0x1d2>
    1bea:	c6 01       	movw	r24, r12
    1bec:	0e 94 55 0e 	call	0x1caa	; 0x1caa <fgetc>
    1bf0:	3c 01       	movw	r6, r24
    1bf2:	97 fd       	sbrc	r25, 7
    1bf4:	08 c0       	rjmp	.+16     	; 0x1c06 <vfscanf+0x1d2>
    1bf6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <isspace>
    1bfa:	89 2b       	or	r24, r25
    1bfc:	59 f3       	breq	.-42     	; 0x1bd4 <vfscanf+0x1a0>
    1bfe:	b6 01       	movw	r22, r12
    1c00:	c3 01       	movw	r24, r6
    1c02:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <ungetc>
    1c06:	81 14       	cp	r8, r1
    1c08:	91 04       	cpc	r9, r1
    1c0a:	a9 f0       	breq	.+42     	; 0x1c36 <vfscanf+0x202>
    1c0c:	f4 01       	movw	r30, r8
    1c0e:	10 82       	st	Z, r1
    1c10:	12 c0       	rjmp	.+36     	; 0x1c36 <vfscanf+0x202>
    1c12:	00 62       	ori	r16, 0x20	; 32
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <vfscanf+0x1e8>
    1c16:	00 61       	ori	r16, 0x10	; 16
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <vfscanf+0x1e8>
    1c1a:	00 64       	ori	r16, 0x40	; 64
    1c1c:	20 2f       	mov	r18, r16
    1c1e:	a4 01       	movw	r20, r8
    1c20:	6f 2d       	mov	r22, r15
    1c22:	c6 01       	movw	r24, r12
    1c24:	0e 94 ca 0b 	call	0x1794	; 0x1794 <conv_int>
    1c28:	81 11       	cpse	r24, r1
    1c2a:	05 c0       	rjmp	.+10     	; 0x1c36 <vfscanf+0x202>
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	83 81       	ldd	r24, Z+3	; 0x03
    1c30:	80 73       	andi	r24, 0x30	; 48
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <vfscanf+0x20a>
    1c34:	06 c0       	rjmp	.+12     	; 0x1c42 <vfscanf+0x20e>
    1c36:	00 fd       	sbrc	r16, 0
    1c38:	0a cf       	rjmp	.-492    	; 0x1a4e <vfscanf+0x1a>
    1c3a:	53 94       	inc	r5
    1c3c:	08 cf       	rjmp	.-496    	; 0x1a4e <vfscanf+0x1a>
    1c3e:	55 20       	and	r5, r5
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <vfscanf+0x214>
    1c42:	85 2d       	mov	r24, r5
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <vfscanf+0x218>
    1c48:	8f ef       	ldi	r24, 0xFF	; 255
    1c4a:	9f ef       	ldi	r25, 0xFF	; 255
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	ef e0       	ldi	r30, 0x0F	; 15
    1c52:	0c 94 68 0f 	jmp	0x1ed0	; 0x1ed0 <__epilogue_restores__+0x6>

00001c56 <isspace>:
    1c56:	91 11       	cpse	r25, r1
    1c58:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__ctype_isfalse>
    1c5c:	80 32       	cpi	r24, 0x20	; 32
    1c5e:	19 f0       	breq	.+6      	; 0x1c66 <isspace+0x10>
    1c60:	89 50       	subi	r24, 0x09	; 9
    1c62:	85 50       	subi	r24, 0x05	; 5
    1c64:	c8 f7       	brcc	.-14     	; 0x1c58 <isspace+0x2>
    1c66:	08 95       	ret

00001c68 <strchr_P>:
    1c68:	fc 01       	movw	r30, r24
    1c6a:	05 90       	lpm	r0, Z+
    1c6c:	06 16       	cp	r0, r22
    1c6e:	21 f0       	breq	.+8      	; 0x1c78 <strchr_P+0x10>
    1c70:	00 20       	and	r0, r0
    1c72:	d9 f7       	brne	.-10     	; 0x1c6a <strchr_P+0x2>
    1c74:	c0 01       	movw	r24, r0
    1c76:	08 95       	ret
    1c78:	31 97       	sbiw	r30, 0x01	; 1
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	08 95       	ret

00001c7e <strnlen_P>:
    1c7e:	fc 01       	movw	r30, r24
    1c80:	05 90       	lpm	r0, Z+
    1c82:	61 50       	subi	r22, 0x01	; 1
    1c84:	70 40       	sbci	r23, 0x00	; 0
    1c86:	01 10       	cpse	r0, r1
    1c88:	d8 f7       	brcc	.-10     	; 0x1c80 <strnlen_P+0x2>
    1c8a:	80 95       	com	r24
    1c8c:	90 95       	com	r25
    1c8e:	8e 0f       	add	r24, r30
    1c90:	9f 1f       	adc	r25, r31
    1c92:	08 95       	ret

00001c94 <strnlen>:
    1c94:	fc 01       	movw	r30, r24
    1c96:	61 50       	subi	r22, 0x01	; 1
    1c98:	70 40       	sbci	r23, 0x00	; 0
    1c9a:	01 90       	ld	r0, Z+
    1c9c:	01 10       	cpse	r0, r1
    1c9e:	d8 f7       	brcc	.-10     	; 0x1c96 <strnlen+0x2>
    1ca0:	80 95       	com	r24
    1ca2:	90 95       	com	r25
    1ca4:	8e 0f       	add	r24, r30
    1ca6:	9f 1f       	adc	r25, r31
    1ca8:	08 95       	ret

00001caa <fgetc>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb2:	20 ff       	sbrs	r18, 0
    1cb4:	33 c0       	rjmp	.+102    	; 0x1d1c <fgetc+0x72>
    1cb6:	26 ff       	sbrs	r18, 6
    1cb8:	0a c0       	rjmp	.+20     	; 0x1cce <fgetc+0x24>
    1cba:	2f 7b       	andi	r18, 0xBF	; 191
    1cbc:	2b 83       	std	Y+3, r18	; 0x03
    1cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	9f 83       	std	Y+7, r25	; 0x07
    1cc6:	8e 83       	std	Y+6, r24	; 0x06
    1cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	29 c0       	rjmp	.+82     	; 0x1d20 <fgetc+0x76>
    1cce:	22 ff       	sbrs	r18, 2
    1cd0:	0f c0       	rjmp	.+30     	; 0x1cf0 <fgetc+0x46>
    1cd2:	e8 81       	ld	r30, Y
    1cd4:	f9 81       	ldd	r31, Y+1	; 0x01
    1cd6:	80 81       	ld	r24, Z
    1cd8:	08 2e       	mov	r0, r24
    1cda:	00 0c       	add	r0, r0
    1cdc:	99 0b       	sbc	r25, r25
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	19 f4       	brne	.+6      	; 0x1ce8 <fgetc+0x3e>
    1ce2:	20 62       	ori	r18, 0x20	; 32
    1ce4:	2b 83       	std	Y+3, r18	; 0x03
    1ce6:	1a c0       	rjmp	.+52     	; 0x1d1c <fgetc+0x72>
    1ce8:	31 96       	adiw	r30, 0x01	; 1
    1cea:	f9 83       	std	Y+1, r31	; 0x01
    1cec:	e8 83       	st	Y, r30
    1cee:	0e c0       	rjmp	.+28     	; 0x1d0c <fgetc+0x62>
    1cf0:	ea 85       	ldd	r30, Y+10	; 0x0a
    1cf2:	fb 85       	ldd	r31, Y+11	; 0x0b
    1cf4:	09 95       	icall
    1cf6:	97 ff       	sbrs	r25, 7
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <fgetc+0x62>
    1cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <fgetc+0x5a>
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <fgetc+0x5c>
    1d04:	80 e1       	ldi	r24, 0x10	; 16
    1d06:	82 2b       	or	r24, r18
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	08 c0       	rjmp	.+16     	; 0x1d1c <fgetc+0x72>
    1d0c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	3f 4f       	sbci	r19, 0xFF	; 255
    1d14:	3f 83       	std	Y+7, r19	; 0x07
    1d16:	2e 83       	std	Y+6, r18	; 0x06
    1d18:	99 27       	eor	r25, r25
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <fgetc+0x76>
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	9f ef       	ldi	r25, 0xFF	; 255
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <fputc>:
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	fb 01       	movw	r30, r22
    1d30:	23 81       	ldd	r18, Z+3	; 0x03
    1d32:	21 fd       	sbrc	r18, 1
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <fputc+0x16>
    1d36:	8f ef       	ldi	r24, 0xFF	; 255
    1d38:	9f ef       	ldi	r25, 0xFF	; 255
    1d3a:	2c c0       	rjmp	.+88     	; 0x1d94 <fputc+0x6e>
    1d3c:	22 ff       	sbrs	r18, 2
    1d3e:	16 c0       	rjmp	.+44     	; 0x1d6c <fputc+0x46>
    1d40:	46 81       	ldd	r20, Z+6	; 0x06
    1d42:	57 81       	ldd	r21, Z+7	; 0x07
    1d44:	24 81       	ldd	r18, Z+4	; 0x04
    1d46:	35 81       	ldd	r19, Z+5	; 0x05
    1d48:	42 17       	cp	r20, r18
    1d4a:	53 07       	cpc	r21, r19
    1d4c:	44 f4       	brge	.+16     	; 0x1d5e <fputc+0x38>
    1d4e:	a0 81       	ld	r26, Z
    1d50:	b1 81       	ldd	r27, Z+1	; 0x01
    1d52:	9d 01       	movw	r18, r26
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	31 83       	std	Z+1, r19	; 0x01
    1d5a:	20 83       	st	Z, r18
    1d5c:	8c 93       	st	X, r24
    1d5e:	26 81       	ldd	r18, Z+6	; 0x06
    1d60:	37 81       	ldd	r19, Z+7	; 0x07
    1d62:	2f 5f       	subi	r18, 0xFF	; 255
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	37 83       	std	Z+7, r19	; 0x07
    1d68:	26 83       	std	Z+6, r18	; 0x06
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <fputc+0x6e>
    1d6c:	8b 01       	movw	r16, r22
    1d6e:	ec 01       	movw	r28, r24
    1d70:	fb 01       	movw	r30, r22
    1d72:	00 84       	ldd	r0, Z+8	; 0x08
    1d74:	f1 85       	ldd	r31, Z+9	; 0x09
    1d76:	e0 2d       	mov	r30, r0
    1d78:	09 95       	icall
    1d7a:	89 2b       	or	r24, r25
    1d7c:	e1 f6       	brne	.-72     	; 0x1d36 <fputc+0x10>
    1d7e:	d8 01       	movw	r26, r16
    1d80:	16 96       	adiw	r26, 0x06	; 6
    1d82:	8d 91       	ld	r24, X+
    1d84:	9c 91       	ld	r25, X
    1d86:	17 97       	sbiw	r26, 0x07	; 7
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	17 96       	adiw	r26, 0x07	; 7
    1d8c:	9c 93       	st	X, r25
    1d8e:	8e 93       	st	-X, r24
    1d90:	16 97       	sbiw	r26, 0x06	; 6
    1d92:	ce 01       	movw	r24, r28
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <ungetc>:
    1d9e:	fb 01       	movw	r30, r22
    1da0:	23 81       	ldd	r18, Z+3	; 0x03
    1da2:	20 ff       	sbrs	r18, 0
    1da4:	12 c0       	rjmp	.+36     	; 0x1dca <ungetc+0x2c>
    1da6:	26 fd       	sbrc	r18, 6
    1da8:	10 c0       	rjmp	.+32     	; 0x1dca <ungetc+0x2c>
    1daa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	93 07       	cpc	r25, r19
    1db0:	61 f0       	breq	.+24     	; 0x1dca <ungetc+0x2c>
    1db2:	82 83       	std	Z+2, r24	; 0x02
    1db4:	2f 7d       	andi	r18, 0xDF	; 223
    1db6:	20 64       	ori	r18, 0x40	; 64
    1db8:	23 83       	std	Z+3, r18	; 0x03
    1dba:	26 81       	ldd	r18, Z+6	; 0x06
    1dbc:	37 81       	ldd	r19, Z+7	; 0x07
    1dbe:	21 50       	subi	r18, 0x01	; 1
    1dc0:	31 09       	sbc	r19, r1
    1dc2:	37 83       	std	Z+7, r19	; 0x07
    1dc4:	26 83       	std	Z+6, r18	; 0x06
    1dc6:	99 27       	eor	r25, r25
    1dc8:	08 95       	ret
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	08 95       	ret

00001dd0 <__ultoa_invert>:
    1dd0:	fa 01       	movw	r30, r20
    1dd2:	aa 27       	eor	r26, r26
    1dd4:	28 30       	cpi	r18, 0x08	; 8
    1dd6:	51 f1       	breq	.+84     	; 0x1e2c <__ultoa_invert+0x5c>
    1dd8:	20 31       	cpi	r18, 0x10	; 16
    1dda:	81 f1       	breq	.+96     	; 0x1e3c <__ultoa_invert+0x6c>
    1ddc:	e8 94       	clt
    1dde:	6f 93       	push	r22
    1de0:	6e 7f       	andi	r22, 0xFE	; 254
    1de2:	6e 5f       	subi	r22, 0xFE	; 254
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	8f 4f       	sbci	r24, 0xFF	; 255
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	af 4f       	sbci	r26, 0xFF	; 255
    1dec:	b1 e0       	ldi	r27, 0x01	; 1
    1dee:	3e d0       	rcall	.+124    	; 0x1e6c <__ultoa_invert+0x9c>
    1df0:	b4 e0       	ldi	r27, 0x04	; 4
    1df2:	3c d0       	rcall	.+120    	; 0x1e6c <__ultoa_invert+0x9c>
    1df4:	67 0f       	add	r22, r23
    1df6:	78 1f       	adc	r23, r24
    1df8:	89 1f       	adc	r24, r25
    1dfa:	9a 1f       	adc	r25, r26
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	68 0f       	add	r22, r24
    1e00:	79 1f       	adc	r23, r25
    1e02:	8a 1f       	adc	r24, r26
    1e04:	91 1d       	adc	r25, r1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	6a 0f       	add	r22, r26
    1e0a:	71 1d       	adc	r23, r1
    1e0c:	81 1d       	adc	r24, r1
    1e0e:	91 1d       	adc	r25, r1
    1e10:	a1 1d       	adc	r26, r1
    1e12:	20 d0       	rcall	.+64     	; 0x1e54 <__ultoa_invert+0x84>
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <__ultoa_invert+0x48>
    1e16:	68 94       	set
    1e18:	3f 91       	pop	r19
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	26 9f       	mul	r18, r22
    1e1e:	11 24       	eor	r1, r1
    1e20:	30 19       	sub	r19, r0
    1e22:	30 5d       	subi	r19, 0xD0	; 208
    1e24:	31 93       	st	Z+, r19
    1e26:	de f6       	brtc	.-74     	; 0x1dde <__ultoa_invert+0xe>
    1e28:	cf 01       	movw	r24, r30
    1e2a:	08 95       	ret
    1e2c:	46 2f       	mov	r20, r22
    1e2e:	47 70       	andi	r20, 0x07	; 7
    1e30:	40 5d       	subi	r20, 0xD0	; 208
    1e32:	41 93       	st	Z+, r20
    1e34:	b3 e0       	ldi	r27, 0x03	; 3
    1e36:	0f d0       	rcall	.+30     	; 0x1e56 <__ultoa_invert+0x86>
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__ultoa_invert+0x5c>
    1e3a:	f6 cf       	rjmp	.-20     	; 0x1e28 <__ultoa_invert+0x58>
    1e3c:	46 2f       	mov	r20, r22
    1e3e:	4f 70       	andi	r20, 0x0F	; 15
    1e40:	40 5d       	subi	r20, 0xD0	; 208
    1e42:	4a 33       	cpi	r20, 0x3A	; 58
    1e44:	18 f0       	brcs	.+6      	; 0x1e4c <__ultoa_invert+0x7c>
    1e46:	49 5d       	subi	r20, 0xD9	; 217
    1e48:	31 fd       	sbrc	r19, 1
    1e4a:	40 52       	subi	r20, 0x20	; 32
    1e4c:	41 93       	st	Z+, r20
    1e4e:	02 d0       	rcall	.+4      	; 0x1e54 <__ultoa_invert+0x84>
    1e50:	a9 f7       	brne	.-22     	; 0x1e3c <__ultoa_invert+0x6c>
    1e52:	ea cf       	rjmp	.-44     	; 0x1e28 <__ultoa_invert+0x58>
    1e54:	b4 e0       	ldi	r27, 0x04	; 4
    1e56:	a6 95       	lsr	r26
    1e58:	97 95       	ror	r25
    1e5a:	87 95       	ror	r24
    1e5c:	77 95       	ror	r23
    1e5e:	67 95       	ror	r22
    1e60:	ba 95       	dec	r27
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x86>
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	61 05       	cpc	r22, r1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	08 95       	ret
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
    1e70:	0a 2e       	mov	r0, r26
    1e72:	06 94       	lsr	r0
    1e74:	57 95       	ror	r21
    1e76:	47 95       	ror	r20
    1e78:	37 95       	ror	r19
    1e7a:	27 95       	ror	r18
    1e7c:	ba 95       	dec	r27
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <__ultoa_invert+0xa2>
    1e80:	62 0f       	add	r22, r18
    1e82:	73 1f       	adc	r23, r19
    1e84:	84 1f       	adc	r24, r20
    1e86:	95 1f       	adc	r25, r21
    1e88:	a0 1d       	adc	r26, r0
    1e8a:	08 95       	ret

00001e8c <__ctype_isfalse>:
    1e8c:	99 27       	eor	r25, r25
    1e8e:	88 27       	eor	r24, r24

00001e90 <__ctype_istrue>:
    1e90:	08 95       	ret

00001e92 <__prologue_saves__>:
    1e92:	2f 92       	push	r2
    1e94:	3f 92       	push	r3
    1e96:	4f 92       	push	r4
    1e98:	5f 92       	push	r5
    1e9a:	6f 92       	push	r6
    1e9c:	7f 92       	push	r7
    1e9e:	8f 92       	push	r8
    1ea0:	9f 92       	push	r9
    1ea2:	af 92       	push	r10
    1ea4:	bf 92       	push	r11
    1ea6:	cf 92       	push	r12
    1ea8:	df 92       	push	r13
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	cf 93       	push	r28
    1eb4:	df 93       	push	r29
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	ca 1b       	sub	r28, r26
    1ebc:	db 0b       	sbc	r29, r27
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	09 94       	ijmp

00001eca <__epilogue_restores__>:
    1eca:	2a 88       	ldd	r2, Y+18	; 0x12
    1ecc:	39 88       	ldd	r3, Y+17	; 0x11
    1ece:	48 88       	ldd	r4, Y+16	; 0x10
    1ed0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ed2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ed4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1eda:	aa 84       	ldd	r10, Y+10	; 0x0a
    1edc:	b9 84       	ldd	r11, Y+9	; 0x09
    1ede:	c8 84       	ldd	r12, Y+8	; 0x08
    1ee0:	df 80       	ldd	r13, Y+7	; 0x07
    1ee2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ee4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee8:	1b 81       	ldd	r17, Y+3	; 0x03
    1eea:	aa 81       	ldd	r26, Y+2	; 0x02
    1eec:	b9 81       	ldd	r27, Y+1	; 0x01
    1eee:	ce 0f       	add	r28, r30
    1ef0:	d1 1d       	adc	r29, r1
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	ed 01       	movw	r28, r26
    1efe:	08 95       	ret

00001f00 <_exit>:
    1f00:	f8 94       	cli

00001f02 <__stop_program>:
    1f02:	ff cf       	rjmp	.-2      	; 0x1f02 <__stop_program>
